export const OrchestratorSection = {
	helpLink: "https://docs.zenml.io/stack-components/orchestrators",
	description:
		"An orchestrator is a special kind of backend that manages the running of each step of the pipeline. Orchestrators administer the actual pipeline runs. By default, ZenML initializes your repository with an orchestrator that runs everything on your local machine."
};

export const ArtifactStoreSection = {
	helpLink: "https://docs.zenml.io/stack-components/artifact-stores",
	description:
		"The Artifact Store is a central component in any MLOps stack. As the name suggests, it acts as a data persistence layer where artifacts (e.g. datasets, models) ingested or generated by the machine learning pipelines are stored."
};

export const ContainerRegistrySection = {
	helpLink: "https://docs.zenml.io/stack-components/container-registries",
	description:
		"Container registry is used to store container images that are built to run machine learning pipelines in remote environments. Containerization of the pipeline code creates a portable environment that allows code to run in an isolated manner."
};

export const StepOperatorSection = {
	description:
		"Step operators allow you to run individual steps in a custom environment different from the default one used by your active orchestrator.",
	helpLink: "https://docs.zenml.io/stack-components/step-operators"
};

export const ModelDeployerSection = {
	description:
		"Model deployers are stack components responsible for online model serving. They are responsible for deploying models to a remote server. Model deployers also act as a registry for models that are served with ZenML.",
	helpLink: "https://docs.zenml.io/stack-components/model-deployers"
};

export const FeatureStoreSection = {
	description:
		"ZenML supports connecting to a Redis-backed Feast feature store as a stack component integration.",
	helpLink: "https://docs.zenml.io/stack-components/feature-stores"
};

export const ExperimentTrackerSection = {
	description:
		"Experiment trackers let you track your ML experiments by logging the parameters and allowing you to compare between different runs.",
	helpLink: "https://docs.zenml.io/stack-components/experiment-trackers"
};

export const AlerterSection = {
	description:
		"Alerters allow you to send messages to chat services (like Slack, Discord, Mattermost, etc.) from within your pipelines. This is useful to immediately get notified when failures happen, for general monitoring/reporting, and also for building human-in-the-loop ML.",
	helpLink: "https://docs.zenml.io/stack-components/alerters	"
};

export const AnnotatorSection = {
	description:
		"Annotators are a stack component that enables the use of data annotation as part of your ZenML stack and pipelines.",
	helpLink: "https://docs.zenml.io/stack-components/annotators"
};

export const DataValidatorSection = {
	description:
		"Data Validators used in ZenML pipelines usually generate data profiles and data quality check reports that are versioned and stored in the Artifact Store and can be retrieved and visualized later.",
	helpLink: "https://docs.zenml.io/stack-components/data-validators"
};

export const ImageBuilderSection = {
	description:
		"The image builder is an essential part of most remote MLOps stacks. It is used to build container images such that your machine-learning pipelines and steps can be executed in remote environments.",
	helpLink: "https://docs.zenml.io/stack-components/image-builders"
};

export const ModelRegistrySection = {
	description:
		"Model registries are centralized storage solutions for managing and tracking machine learning models across various stages of development and deployment.",
	helpLink: "https://docs.zenml.io/stack-components/model-registries"
};
