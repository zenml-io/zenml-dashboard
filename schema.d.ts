/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/health": {
    /**
     * Health
     * @description Get health status of the server.
     *
     * Returns:
     *     String representing the health status of the server.
     */
    get: operations["health_health_get"];
  };
  "/api/v1/login": {
    /**
     * Login
     * @description Authorize a user through the external authenticator service.
     *
     * Args:
     *     request: The request object.
     *     response: The response object.
     *     redirect_url: The URL to redirect to after successful login.
     *
     * Returns:
     *     An authentication response with an access token or an external
     *     authorization URL.
     */
    post: operations["login_api_v1_login_post"];
  };
  "/api/v1/logout": {
    /**
     * Logout
     * @description Logs out the user.
     *
     * Args:
     *     response: The response object.
     */
    get: operations["logout_api_v1_logout_get"];
  };
  "/api/v1/pipelines": {
    /**
     * List Pipelines
     * @description Gets a list of pipelines.
     *
     * Args:
     *     pipeline_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     List of pipeline objects.
     */
    get: operations["list_pipelines_api_v1_pipelines_get"];
  };
  "/api/v1/pipelines/{pipeline_id}": {
    /**
     * Get Pipeline
     * @description Gets a specific pipeline using its unique id.
     *
     * Args:
     *     pipeline_id: ID of the pipeline to get.
     *
     * Returns:
     *     A specific pipeline object.
     */
    get: operations["get_pipeline_api_v1_pipelines__pipeline_id__get"];
    /**
     * Update Pipeline
     * @description Updates the attribute on a specific pipeline using its unique id.
     *
     * Args:
     *     pipeline_id: ID of the pipeline to get.
     *     pipeline_update: the model containing the attributes to update.
     *
     * Returns:
     *     The updated pipeline object.
     */
    put: operations["update_pipeline_api_v1_pipelines__pipeline_id__put"];
    /**
     * Delete Pipeline
     * @description Deletes a specific pipeline.
     *
     * Args:
     *     pipeline_id: ID of the pipeline to delete.
     */
    delete: operations["delete_pipeline_api_v1_pipelines__pipeline_id__delete"];
  };
  "/api/v1/pipelines/{pipeline_id}/runs": {
    /**
     * List Pipeline Runs
     * @description Get pipeline runs according to query filters.
     *
     * Args:
     *     pipeline_run_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     The pipeline runs according to query filters.
     */
    get: operations["list_pipeline_runs_api_v1_pipelines__pipeline_id__runs_get"];
  };
  "/api/v1/pipelines/{pipeline_id}/pipeline-spec": {
    /**
     * Get Pipeline Spec
     * @description Gets the spec of a specific pipeline using its unique id.
     *
     * Args:
     *     pipeline_id: ID of the pipeline to get.
     *
     * Returns:
     *     The spec of the pipeline.
     */
    get: operations["get_pipeline_spec_api_v1_pipelines__pipeline_id__pipeline_spec_get"];
  };
  "/api/v1/workspaces": {
    /**
     * List Workspaces
     * @description Lists all workspaces in the organization.
     *
     * Args:
     *     workspace_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     A list of workspaces.
     */
    get: operations["list_workspaces_api_v1_workspaces_get"];
    /**
     * Create Workspace
     * @description Creates a workspace based on the requestBody.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace: Workspace to create.
     *
     * Returns:
     *     The created workspace.
     */
    post: operations["create_workspace_api_v1_workspaces_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}": {
    /**
     * Get Workspace
     * @description Get a workspace for given name.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *
     * Returns:
     *     The requested workspace.
     */
    get: operations["get_workspace_api_v1_workspaces__workspace_name_or_id__get"];
    /**
     * Update Workspace
     * @description Get a workspace for given name.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace to update.
     *     workspace_update: the workspace to use to update
     *
     * Returns:
     *     The updated workspace.
     */
    put: operations["update_workspace_api_v1_workspaces__workspace_name_or_id__put"];
    /**
     * Delete Workspace
     * @description Deletes a workspace.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     */
    delete: operations["delete_workspace_api_v1_workspaces__workspace_name_or_id__delete"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/role_assignments": {
    /**
     * List User Role Assignments For Workspace
     * @description Returns a list of all roles that are assigned to a team.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     user_role_assignment_filter_model: Filter model used for pagination,
     *         sorting, filtering
     *
     * Returns:
     *     A list of all roles that are assigned to a team.
     */
    get: operations["list_user_role_assignments_for_workspace_api_v1_workspaces__workspace_name_or_id__role_assignments_get"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/team_role_assignments": {
    /**
     * List Team Role Assignments For Workspace
     * @description Returns a list of all roles that are assigned to a team.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     team_role_assignment_filter_model: Filter model used for pagination,
     *         sorting, filtering
     *
     * Returns:
     *     A list of all roles that are assigned to a team.
     */
    get: operations["list_team_role_assignments_for_workspace_api_v1_workspaces__workspace_name_or_id__team_role_assignments_get"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/stacks": {
    /**
     * List Workspace Stacks
     * @description Get stacks that are part of a specific workspace for the user.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     stack_filter_model: Filter model used for pagination, sorting, filtering
     *     auth_context: Authentication Context
     *
     * Returns:
     *     All stacks part of the specified workspace.
     */
    get: operations["list_workspace_stacks_api_v1_workspaces__workspace_name_or_id__stacks_get"];
    /**
     * Create Stack
     * @description Creates a stack for a particular workspace.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     stack: Stack to register.
     *     auth_context: The authentication context.
     *
     * Returns:
     *     The created stack.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the stack
     *         does not match the current workspace or authenticated user.
     */
    post: operations["create_stack_api_v1_workspaces__workspace_name_or_id__stacks_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/components": {
    /**
     * List Workspace Stack Components
     * @description List stack components that are part of a specific workspace.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     component_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *     auth_context: Authentication Context
     *
     * Returns:
     *     All stack components part of the specified workspace.
     */
    get: operations["list_workspace_stack_components_api_v1_workspaces__workspace_name_or_id__components_get"];
    /**
     * Create Stack Component
     * @description Creates a stack component.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     component: Stack component to register.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created stack component.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the stack
     *         component does not match the current workspace or authenticated
     *         user.
     */
    post: operations["create_stack_component_api_v1_workspaces__workspace_name_or_id__components_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/pipelines": {
    /**
     * List Workspace Pipelines
     * @description Gets pipelines defined for a specific workspace.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     pipeline_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     All pipelines within the workspace.
     */
    get: operations["list_workspace_pipelines_api_v1_workspaces__workspace_name_or_id__pipelines_get"];
    /**
     * Create Pipeline
     * @description Creates a pipeline.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     pipeline: Pipeline to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created pipeline.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the pipeline
     *         does not match the current workspace or authenticated user.
     */
    post: operations["create_pipeline_api_v1_workspaces__workspace_name_or_id__pipelines_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/pipeline_builds": {
    /**
     * List Workspace Builds
     * @description Gets builds defined for a specific workspace.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     build_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     All builds within the workspace.
     */
    get: operations["list_workspace_builds_api_v1_workspaces__workspace_name_or_id__pipeline_builds_get"];
    /**
     * Create Build
     * @description Creates a build.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     build: Build to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created build.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the build
     *         does not match the current workspace or authenticated user.
     */
    post: operations["create_build_api_v1_workspaces__workspace_name_or_id__pipeline_builds_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/pipeline_deployments": {
    /**
     * List Workspace Deployments
     * @description Gets deployments defined for a specific workspace.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     deployment_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     All deployments within the workspace.
     */
    get: operations["list_workspace_deployments_api_v1_workspaces__workspace_name_or_id__pipeline_deployments_get"];
    /**
     * Create Deployment
     * @description Creates a deployment.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     deployment: Deployment to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created deployment.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the
     *         deployment does not match the current workspace or authenticated
     *         user.
     */
    post: operations["create_deployment_api_v1_workspaces__workspace_name_or_id__pipeline_deployments_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/runs": {
    /**
     * List Runs
     * @description Get pipeline runs according to query filters.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     runs_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     *
     * Returns:
     *     The pipeline runs according to query filters.
     */
    get: operations["list_runs_api_v1_workspaces__workspace_name_or_id__runs_get"];
    /**
     * Create Pipeline Run
     * @description Creates a pipeline run.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     pipeline_run: Pipeline run to create.
     *     auth_context: Authentication context.
     *     get_if_exists: If a similar pipeline run already exists, return it
     *         instead of raising an error.
     *
     * Returns:
     *     The created pipeline run.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the
     *         pipeline run does not match the current workspace or authenticated
     *         user.
     */
    post: operations["create_pipeline_run_api_v1_workspaces__workspace_name_or_id__runs_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/schedules": {
    /**
     * Create Schedule
     * @description Creates a schedule.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     schedule: Schedule to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created schedule.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the
     *         schedule does not match the current workspace or authenticated user.
     */
    post: operations["create_schedule_api_v1_workspaces__workspace_name_or_id__schedules_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/runs/get-or-create": {
    /**
     * Get Or Create Pipeline Run
     * @description Get or create a pipeline run.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     pipeline_run: Pipeline run to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The pipeline run and a boolean indicating whether the run was created
     *     or not.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the
     *         pipeline run does not match the current workspace or authenticated
     *         user.
     */
    post: operations["get_or_create_pipeline_run_api_v1_workspaces__workspace_name_or_id__runs_get_or_create_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/run-metadata": {
    /**
     * Create Run Metadata
     * @description Creates run metadata.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     run_metadata: The run metadata to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created run metadata.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the run
     *         metadata does not match the current workspace or authenticated user.
     */
    post: operations["create_run_metadata_api_v1_workspaces__workspace_name_or_id__run_metadata_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/secrets": {
    /**
     * Create Secret
     * @description Creates a secret.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     secret: Secret to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created secret.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the
     *         secret does not match the current workspace or authenticated user.
     */
    post: operations["create_secret_api_v1_workspaces__workspace_name_or_id__secrets_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/code_repositories": {
    /**
     * List Workspace Code Repositories
     * @description Gets code repositories defined for a specific workspace.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     All code repositories within the workspace.
     */
    get: operations["list_workspace_code_repositories_api_v1_workspaces__workspace_name_or_id__code_repositories_get"];
    /**
     * Create Code Repository
     * @description Creates a code repository.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     code_repository: Code repository to create.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created code repository.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the
     *         code repository does not match the current workspace or
     *         authenticated user.
     */
    post: operations["create_code_repository_api_v1_workspaces__workspace_name_or_id__code_repositories_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/statistics": {
    /**
     * Get Workspace Statistics
     * @description Gets statistics of a workspace.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace to get statistics for.
     *
     * Returns:
     *     All pipelines within the workspace.
     */
    get: operations["get_workspace_statistics_api_v1_workspaces__workspace_name_or_id__statistics_get"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/service_connectors": {
    /**
     * List Workspace Service Connectors
     * @description List service connectors that are part of a specific workspace.
     *
     * # noqa: DAR401
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     connector_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *     auth_context: Authentication Context
     *
     * Returns:
     *     All service connectors part of the specified workspace.
     */
    get: operations["list_workspace_service_connectors_api_v1_workspaces__workspace_name_or_id__service_connectors_get"];
    /**
     * Create Service Connector
     * @description Creates a service connector.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     connector: Service connector to register.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created service connector.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the service
     *         connector does not match the current workspace or authenticated
     *         user.
     */
    post: operations["create_service_connector_api_v1_workspaces__workspace_name_or_id__service_connectors_post"];
  };
  "/api/v1/workspaces/{workspace_name_or_id}/service_connectors/resources": {
    /**
     * List Service Connector Resources
     * @description List resources that can be accessed by service connectors.
     *
     * Args:
     *     workspace_name_or_id: Name or ID of the workspace.
     *     connector_type: the service connector type identifier to filter by.
     *     resource_type: the resource type identifier to filter by.
     *     resource_id: the resource identifier to filter by.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The matching list of resources that available service
     *     connectors have access to.
     */
    get: operations["list_service_connector_resources_api_v1_workspaces__workspace_name_or_id__service_connectors_resources_get"];
  };
  "/api/v1/flavors": {
    /**
     * List Flavors
     * @description Returns all flavors.
     *
     * Args:
     *     flavor_filter_model: Filter model used for pagination, sorting,
     *                          filtering
     *
     *
     * Returns:
     *     All flavors.
     */
    get: operations["list_flavors_api_v1_flavors_get"];
    /**
     * Create Flavor
     * @description Creates a stack component flavor.
     *
     * Args:
     *     flavor: Stack component flavor to register.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The created stack component flavor.
     *
     * Raises:
     *     IllegalOperationError: If the workspace or user specified in the stack
     *         component flavor does not match the current workspace or authenticated
     *         user.
     */
    post: operations["create_flavor_api_v1_flavors_post"];
  };
  "/api/v1/flavors/{flavor_id}": {
    /**
     * Get Flavor
     * @description Returns the requested flavor.
     *
     * Args:
     *     flavor_id: ID of the flavor.
     *
     * Returns:
     *     The requested stack.
     */
    get: operations["get_flavor_api_v1_flavors__flavor_id__get"];
    /**
     * Delete Flavor
     * @description Deletes a flavor.
     *
     * Args:
     *     flavor_id: ID of the flavor.
     */
    delete: operations["delete_flavor_api_v1_flavors__flavor_id__delete"];
  };
  "/api/v1/flavors/{team_id}": {
    /**
     * Update Flavor
     * @description Updates a flavor.
     *
     * # noqa: DAR401
     *
     * Args:
     *     flavor_id: ID of the team to update.
     *     flavor_update: Team update.
     *
     * Returns:
     *     The updated flavor.
     */
    put: operations["update_flavor_api_v1_flavors__team_id__put"];
  };
  "/api/v1/roles": {
    /**
     * List Roles
     * @description Returns a list of all roles.
     *
     * Args:
     *     role_filter_model: Filter model used for pagination, sorting, filtering
     *
     *
     * Returns:
     *     List of all roles.
     */
    get: operations["list_roles_api_v1_roles_get"];
    /**
     * Create Role
     * @description Creates a role.
     *
     * # noqa: DAR401
     *
     * Args:
     *     role: Role to create.
     *
     * Returns:
     *     The created role.
     */
    post: operations["create_role_api_v1_roles_post"];
  };
  "/api/v1/roles/{role_name_or_id}": {
    /**
     * Get Role
     * @description Returns a specific role.
     *
     * Args:
     *     role_name_or_id: Name or ID of the role.
     *
     * Returns:
     *     A specific role.
     */
    get: operations["get_role_api_v1_roles__role_name_or_id__get"];
    /**
     * Delete Role
     * @description Deletes a specific role.
     *
     * Args:
     *     role_name_or_id: Name or ID of the role.
     */
    delete: operations["delete_role_api_v1_roles__role_name_or_id__delete"];
  };
  "/api/v1/roles/{role_id}": {
    /**
     * Update Role
     * @description Updates a role.
     *
     * # noqa: DAR401
     *
     * Args:
     *     role_id: The ID of the role.
     *     role_update: Role update.
     *
     * Returns:
     *     The created role.
     */
    put: operations["update_role_api_v1_roles__role_id__put"];
  };
  "/api/v1/role_assignments": {
    /**
     * List User Role Assignments
     * @description Returns a list of all role assignments.
     *
     * Args:
     *     user_role_assignment_filter_model: filter models for user role assignments
     *
     * Returns:
     *     List of all role assignments.
     */
    get: operations["list_user_role_assignments_api_v1_role_assignments_get"];
    /**
     * Create Role Assignment
     * @description Creates a role assignment.
     *
     * # noqa: DAR401
     *
     * Args:
     *     role_assignment: Role assignment to create.
     *
     * Returns:
     *     The created role assignment.
     */
    post: operations["create_role_assignment_api_v1_role_assignments_post"];
  };
  "/api/v1/role_assignments/{role_assignment_id}": {
    /**
     * Get Role Assignment
     * @description Returns a specific role assignment.
     *
     * Args:
     *     role_assignment_id: Name or ID of the role assignment.
     *
     * Returns:
     *     A specific role assignment.
     */
    get: operations["get_role_assignment_api_v1_role_assignments__role_assignment_id__get"];
    /**
     * Delete Role Assignment
     * @description Deletes a specific role.
     *
     * Args:
     *     role_assignment_id: The ID of the role assignment.
     */
    delete: operations["delete_role_assignment_api_v1_role_assignments__role_assignment_id__delete"];
  };
  "/api/v1/team_role_assignments": {
    /**
     * List Team Role Assignments
     * @description Returns a list of all role assignments.
     *
     * Args:
     *     team_role_assignment_filter_model: filter models for team role assignments
     *
     *
     * Returns:
     *     List of all role assignments.
     */
    get: operations["list_team_role_assignments_api_v1_team_role_assignments_get"];
    /**
     * Create Team Role Assignment
     * @description Creates a role assignment.
     *
     * # noqa: DAR401
     *
     * Args:
     *     role_assignment: Role assignment to create.
     *
     * Returns:
     *     The created role assignment.
     */
    post: operations["create_team_role_assignment_api_v1_team_role_assignments_post"];
  };
  "/api/v1/team_role_assignments/{role_assignment_id}": {
    /**
     * Get Team Role Assignment
     * @description Returns a specific role assignment.
     *
     * Args:
     *     role_assignment_id: Name or ID of the role assignment.
     *
     * Returns:
     *     A specific role assignment.
     */
    get: operations["get_team_role_assignment_api_v1_team_role_assignments__role_assignment_id__get"];
    /**
     * Delete Team Role Assignment
     * @description Deletes a specific role.
     *
     * Args:
     *     role_assignment_id: The ID of the role assignment.
     */
    delete: operations["delete_team_role_assignment_api_v1_team_role_assignments__role_assignment_id__delete"];
  };
  "/api/v1/runs": {
    /**
     * List Runs
     * @description Get pipeline runs according to query filters.
     *
     * Args:
     *     runs_filter_model: Filter model used for pagination, sorting, filtering
     *
     * Returns:
     *     The pipeline runs according to query filters.
     */
    get: operations["list_runs_api_v1_runs_get"];
  };
  "/api/v1/runs/{run_id}": {
    /**
     * Get Run
     * @description Get a specific pipeline run using its ID.
     *
     * Args:
     *     run_id: ID of the pipeline run to get.
     *
     * Returns:
     *     The pipeline run.
     */
    get: operations["get_run_api_v1_runs__run_id__get"];
    /**
     * Update Run
     * @description Updates a run.
     *
     * Args:
     *     run_id: ID of the run.
     *     run_model: Run model to use for the update.
     *
     * Returns:
     *     The updated run model.
     */
    put: operations["update_run_api_v1_runs__run_id__put"];
    /**
     * Delete Run
     * @description Deletes a run.
     *
     * Args:
     *     run_id: ID of the run.
     */
    delete: operations["delete_run_api_v1_runs__run_id__delete"];
  };
  "/api/v1/runs/{run_id}/graph": {
    /**
     * Get Run Dag
     * @description Get the DAG for a given pipeline run.
     *
     * Args:
     *     run_id: ID of the pipeline run to use to get the DAG.
     *
     * Returns:
     *     The DAG for a given pipeline run.
     */
    get: operations["get_run_dag_api_v1_runs__run_id__graph_get"];
  };
  "/api/v1/runs/{run_id}/steps": {
    /**
     * Get Run Steps
     * @description Get all steps for a given pipeline run.
     *
     * Args:
     *     step_run_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     The steps for a given pipeline run.
     */
    get: operations["get_run_steps_api_v1_runs__run_id__steps_get"];
  };
  "/api/v1/runs/{run_id}/pipeline-configuration": {
    /**
     * Get Pipeline Configuration
     * @description Get the pipeline configuration of a specific pipeline run using its ID.
     *
     * Args:
     *     run_id: ID of the pipeline run to get.
     *
     * Returns:
     *     The pipeline configuration of the pipeline run.
     */
    get: operations["get_pipeline_configuration_api_v1_runs__run_id__pipeline_configuration_get"];
  };
  "/api/v1/runs/{run_id}/status": {
    /**
     * Get Run Status
     * @description Get the status of a specific pipeline run.
     *
     * Args:
     *     run_id: ID of the pipeline run for which to get the status.
     *
     * Returns:
     *     The status of the pipeline run.
     */
    get: operations["get_run_status_api_v1_runs__run_id__status_get"];
  };
  "/api/v1/run-metadata": {
    /**
     * List Run Metadata
     * @description Get run metadata according to query filters.
     *
     * Args:
     *     run_metadata_filter_model: Filter model used for pagination, sorting,
     *         filtering.
     *
     * Returns:
     *     The pipeline runs according to query filters.
     */
    get: operations["list_run_metadata_api_v1_run_metadata_get"];
  };
  "/api/v1/schedules": {
    /**
     * List Schedules
     * @description Gets a list of schedules.
     *
     * Args:
     *     schedule_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     List of schedule objects.
     */
    get: operations["list_schedules_api_v1_schedules_get"];
  };
  "/api/v1/schedules/{schedule_id}": {
    /**
     * Get Schedule
     * @description Gets a specific schedule using its unique id.
     *
     * Args:
     *     schedule_id: ID of the schedule to get.
     *
     * Returns:
     *     A specific schedule object.
     */
    get: operations["get_schedule_api_v1_schedules__schedule_id__get"];
    /**
     * Update Schedule
     * @description Updates the attribute on a specific schedule using its unique id.
     *
     * Args:
     *     schedule_id: ID of the schedule to get.
     *     schedule_update: the model containing the attributes to update.
     *
     * Returns:
     *     The updated schedule object.
     */
    put: operations["update_schedule_api_v1_schedules__schedule_id__put"];
    /**
     * Delete Schedule
     * @description Deletes a specific schedule using its unique id.
     *
     * Args:
     *     schedule_id: ID of the schedule to delete.
     */
    delete: operations["delete_schedule_api_v1_schedules__schedule_id__delete"];
  };
  "/api/v1/secrets": {
    /**
     * List Secrets
     * @description Gets a list of secrets.
     *
     * Args:
     *     secret_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *     auth_context: Authentication context.
     *
     * Returns:
     *     List of secret objects.
     */
    get: operations["list_secrets_api_v1_secrets_get"];
  };
  "/api/v1/secrets/{secret_id}": {
    /**
     * Get Secret
     * @description Gets a specific secret using its unique id.
     *
     * Args:
     *     secret_id: ID of the secret to get.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     A specific secret object.
     */
    get: operations["get_secret_api_v1_secrets__secret_id__get"];
    /**
     * Update Secret
     * @description Updates the attribute on a specific secret using its unique id.
     *
     * Args:
     *     secret_id: ID of the secret to get.
     *     secret_update: the model containing the attributes to update.
     *     patch_values: Whether to patch the secret values or replace them.
     *
     * Returns:
     *     The updated secret object.
     */
    put: operations["update_secret_api_v1_secrets__secret_id__put"];
    /**
     * Delete Secret
     * @description Deletes a specific secret using its unique id.
     *
     * Args:
     *     secret_id: ID of the secret to delete.
     */
    delete: operations["delete_secret_api_v1_secrets__secret_id__delete"];
  };
  "/api/v1/version": {
    /**
     * Version
     * @description Get version of the server.
     *
     * Returns:
     *     String representing the version of the server.
     */
    get: operations["version_api_v1_version_get"];
  };
  "/api/v1/info": {
    /**
     * Server Info
     * @description Get information about the server.
     *
     * Returns:
     *     Information about the server.
     */
    get: operations["server_info_api_v1_info_get"];
  };
  "/api/v1/service_connectors": {
    /**
     * List Service Connectors
     * @description Get a list of all service connectors for a specific type.
     *
     * Args:
     *     connector_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *     expand_secrets: Whether to expand secrets or not.
     *     auth_context: Authentication Context
     *
     * Returns:
     *     Page with list of service connectors for a specific type.
     */
    get: operations["list_service_connectors_api_v1_service_connectors_get"];
  };
  "/api/v1/service_connectors/{connector_id}": {
    /**
     * Get Service Connector
     * @description Returns the requested service connector.
     *
     * Args:
     *     connector_id: ID of the service connector.
     *     expand_secrets: Whether to expand secrets or not.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The requested service connector.
     *
     * Raises:
     *     KeyError: If the service connector does not exist or is not accessible.
     */
    get: operations["get_service_connector_api_v1_service_connectors__connector_id__get"];
    /**
     * Update Service Connector
     * @description Updates a service connector.
     *
     * Args:
     *     connector_id: ID of the service connector.
     *     connector_update: Service connector to use to update.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     Updated service connector.
     *
     * Raises:
     *     KeyError: If the service connector does not exist or is not accessible.
     */
    put: operations["update_service_connector_api_v1_service_connectors__connector_id__put"];
    /**
     * Delete Service Connector
     * @description Deletes a service connector.
     *
     * Args:
     *     connector_id: ID of the service connector.
     *     auth_context: Authentication context.
     *
     * Raises:
     *     KeyError: If the service connector does not exist or is not accessible.
     */
    delete: operations["delete_service_connector_api_v1_service_connectors__connector_id__delete"];
  };
  "/api/v1/service_connectors/verify": {
    /**
     * Validate And Verify Service Connector Config
     * @description Verifies if a service connector configuration has access to resources.
     *
     * This requires the service connector implementation to be installed
     * on the ZenML server, otherwise a 501 Not Implemented error will be
     * returned.
     *
     * Args:
     *     connector: The service connector configuration to verify.
     *     list_resources: If True, the list of all resources accessible
     *         through the service connector is returned.
     *
     * Returns:
     *     The list of resources that the service connector configuration has
     *     access to.
     */
    post: operations["validate_and_verify_service_connector_config_api_v1_service_connectors_verify_post"];
  };
  "/api/v1/service_connectors/{connector_id}/verify": {
    /**
     * Validate And Verify Service Connector
     * @description Verifies if a service connector instance has access to one or more resources.
     *
     * This requires the service connector implementation to be installed
     * on the ZenML server, otherwise a 501 Not Implemented error will be
     * returned.
     *
     * Args:
     *     connector_id: The ID of the service connector to verify.
     *     resource_type: The type of resource to verify access to.
     *     resource_id: The ID of the resource to verify access to.
     *     list_resources: If True, the list of all resources accessible
     *         through the service connector and matching the supplied resource
     *         type and ID are returned.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     The list of resources that the service connector has access to, scoped
     *     to the supplied resource type and ID, if provided.
     *
     * Raises:
     *     KeyError: If the service connector does not exist or is not accessible.
     */
    put: operations["validate_and_verify_service_connector_api_v1_service_connectors__connector_id__verify_put"];
  };
  "/api/v1/service_connectors/{connector_id}/client": {
    /**
     * Get Service Connector Client
     * @description Get a service connector client for a service connector and given resource.
     *
     * This requires the service connector implementation to be installed
     * on the ZenML server, otherwise a 501 Not Implemented error will be
     * returned.
     *
     * Args:
     *     connector_id: ID of the service connector.
     *     resource_type: Type of the resource to list.
     *     resource_id: ID of the resource to list.
     *     auth_context: Authentication context.
     *
     * Returns:
     *     A service connector client that can be used to access the given
     *     resource.
     *
     * Raises:
     *     KeyError: If the service connector does not exist or is not accessible.
     */
    get: operations["get_service_connector_client_api_v1_service_connectors__connector_id__client_get"];
  };
  "/api/v1/service_connector_types": {
    /**
     * List Service Connector Types
     * @description Get a list of service connector types.
     *
     * Args:
     *     connector_type: Filter by connector type.
     *     resource_type: Filter by resource type.
     *     auth_method: Filter by auth method.
     *
     * Returns:
     *     List of service connector types.
     */
    get: operations["list_service_connector_types_api_v1_service_connector_types_get"];
  };
  "/api/v1/service_connector_types/{connector_type}": {
    /**
     * Get Service Connector Type
     * @description Returns the requested service connector type.
     *
     * Args:
     *     connector_type: the service connector type identifier.
     *
     * Returns:
     *     The requested service connector type.
     */
    get: operations["get_service_connector_type_api_v1_service_connector_types__connector_type__get"];
  };
  "/api/v1/stacks": {
    /**
     * List Stacks
     * @description Returns all stacks.
     *
     * Args:
     *     stack_filter_model: Filter model used for pagination, sorting, filtering
     *     auth_context: Authentication Context
     *
     * Returns:
     *     All stacks.
     */
    get: operations["list_stacks_api_v1_stacks_get"];
  };
  "/api/v1/stacks/{stack_id}": {
    /**
     * Get Stack
     * @description Returns the requested stack.
     *
     * Args:
     *     stack_id: ID of the stack.
     *
     * Returns:
     *     The requested stack.
     */
    get: operations["get_stack_api_v1_stacks__stack_id__get"];
    /**
     * Update Stack
     * @description Updates a stack.
     *
     * Args:
     *     stack_id: Name of the stack.
     *     stack_update: Stack to use for the update.
     *
     * Returns:
     *     The updated stack.
     */
    put: operations["update_stack_api_v1_stacks__stack_id__put"];
    /**
     * Delete Stack
     * @description Deletes a stack.
     *
     * Args:
     *     stack_id: Name of the stack.
     */
    delete: operations["delete_stack_api_v1_stacks__stack_id__delete"];
  };
  "/api/v1/components": {
    /**
     * List Stack Components
     * @description Get a list of all stack components for a specific type.
     *
     * Args:
     *     component_filter_model: Filter model used for pagination, sorting,
     *                             filtering
     *     auth_context: Authentication Context
     *
     * Returns:
     *     List of stack components for a specific type.
     */
    get: operations["list_stack_components_api_v1_components_get"];
  };
  "/api/v1/components/{component_id}": {
    /**
     * Get Stack Component
     * @description Returns the requested stack component.
     *
     * Args:
     *     component_id: ID of the stack component.
     *
     * Returns:
     *     The requested stack component.
     */
    get: operations["get_stack_component_api_v1_components__component_id__get"];
    /**
     * Update Stack Component
     * @description Updates a stack component.
     *
     * Args:
     *     component_id: ID of the stack component.
     *     component_update: Stack component to use to update.
     *
     * Returns:
     *     Updated stack component.
     */
    put: operations["update_stack_component_api_v1_components__component_id__put"];
    /**
     * Deregister Stack Component
     * @description Deletes a stack component.
     *
     * Args:
     *     component_id: ID of the stack component.
     */
    delete: operations["deregister_stack_component_api_v1_components__component_id__delete"];
  };
  "/api/v1/component-types": {
    /**
     * Get Stack Component Types
     * @description Get a list of all stack component types.
     *
     * Returns:
     *     List of stack components.
     */
    get: operations["get_stack_component_types_api_v1_component_types_get"];
  };
  "/api/v1/steps": {
    /**
     * List Run Steps
     * @description Get run steps according to query filters.
     *
     * Args:
     *     step_run_filter_model: Filter model used for pagination, sorting,
     *                                filtering
     *
     * Returns:
     *     The run steps according to query filters.
     */
    get: operations["list_run_steps_api_v1_steps_get"];
    /**
     * Create Run Step
     * @description Create a run step.
     *
     * Args:
     *     step: The run step to create.
     *
     * Returns:
     *     The created run step.
     */
    post: operations["create_run_step_api_v1_steps_post"];
  };
  "/api/v1/steps/{step_id}": {
    /**
     * Get Step
     * @description Get one specific step.
     *
     * Args:
     *     step_id: ID of the step to get.
     *
     * Returns:
     *     The step.
     */
    get: operations["get_step_api_v1_steps__step_id__get"];
    /**
     * Update Step
     * @description Updates a step.
     *
     * Args:
     *     step_id: ID of the step.
     *     step_model: Step model to use for the update.
     *
     * Returns:
     *     The updated step model.
     */
    put: operations["update_step_api_v1_steps__step_id__put"];
  };
  "/api/v1/steps/{step_id}/step-configuration": {
    /**
     * Get Step Configuration
     * @description Get the configuration of a specific step.
     *
     * Args:
     *     step_id: ID of the step to get.
     *
     * Returns:
     *     The step configuration.
     */
    get: operations["get_step_configuration_api_v1_steps__step_id__step_configuration_get"];
  };
  "/api/v1/steps/{step_id}/status": {
    /**
     * Get Step Status
     * @description Get the status of a specific step.
     *
     * Args:
     *     step_id: ID of the step for which to get the status.
     *
     * Returns:
     *     The status of the step.
     */
    get: operations["get_step_status_api_v1_steps__step_id__status_get"];
  };
  "/api/v1/steps/{step_id}/logs": {
    /**
     * Get Step Logs
     * @description Get the logs of a specific step.
     *
     * Args:
     *     step_id: ID of the step for which to get the logs.
     *
     * Returns:
     *     The logs of the step.
     *
     * Raises:
     *     HTTPException: If no logs are available for this step.
     */
    get: operations["get_step_logs_api_v1_steps__step_id__logs_get"];
  };
  "/api/v1/artifacts": {
    /**
     * List Artifacts
     * @description Get artifacts according to query filters.
     *
     * Args:
     *     artifact_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     The artifacts according to query filters.
     */
    get: operations["list_artifacts_api_v1_artifacts_get"];
    /**
     * Create Artifact
     * @description Create a new artifact.
     *
     * Args:
     *     artifact: The artifact to create.
     *
     * Returns:
     *     The created artifact.
     */
    post: operations["create_artifact_api_v1_artifacts_post"];
  };
  "/api/v1/artifacts/{artifact_id}": {
    /**
     * Get Artifact
     * @description Get an artifact by ID.
     *
     * Args:
     *     artifact_id: The ID of the artifact to get.
     *
     * Returns:
     *     The artifact with the given ID.
     */
    get: operations["get_artifact_api_v1_artifacts__artifact_id__get"];
    /**
     * Delete Artifact
     * @description Delete an artifact by ID.
     *
     * Args:
     *     artifact_id: The ID of the artifact to delete.
     */
    delete: operations["delete_artifact_api_v1_artifacts__artifact_id__delete"];
  };
  "/api/v1/artifacts/{artifact_id}/visualize": {
    /**
     * Get Artifact Visualization
     * @description Get the visualization of an artifact.
     *
     * Args:
     *     artifact_id: ID of the artifact for which to get the visualization.
     *     index: Index of the visualization to get (if there are multiple).
     *
     * Returns:
     *     The visualization of the artifact.
     */
    get: operations["get_artifact_visualization_api_v1_artifacts__artifact_id__visualize_get"];
  };
  "/api/v1/teams": {
    /**
     * List Teams
     * @description Returns a list of all teams.
     *
     * Args:
     *     team_filter_model: All filter parameters including pagination params.
     *
     * Returns:
     *     List of all teams.
     */
    get: operations["list_teams_api_v1_teams_get"];
    /**
     * Create Team
     * @description Creates a team.
     *
     * # noqa: DAR401
     *
     * Args:
     *     team: Team to create.
     *
     * Returns:
     *     The created team.
     */
    post: operations["create_team_api_v1_teams_post"];
  };
  "/api/v1/teams/{team_name_or_id}": {
    /**
     * Get Team
     * @description Returns a specific team.
     *
     * Args:
     *     team_name_or_id: Name or ID of the team.
     *
     * Returns:
     *     A specific team.
     */
    get: operations["get_team_api_v1_teams__team_name_or_id__get"];
    /**
     * Delete Team
     * @description Deletes a specific team.
     *
     * Args:
     *     team_name_or_id: Name or ID of the team.
     */
    delete: operations["delete_team_api_v1_teams__team_name_or_id__delete"];
  };
  "/api/v1/teams/{team_id}": {
    /**
     * Update Team
     * @description Updates a team.
     *
     * # noqa: DAR401
     *
     * Args:
     *     team_id: ID of the team to update.
     *     team_update: Team update.
     *
     * Returns:
     *     The updated team.
     */
    put: operations["update_team_api_v1_teams__team_id__put"];
  };
  "/api/v1/teams/{team_name_or_id}/roles": {
    /**
     * List Role Assignments For Team
     * @description Returns a list of all roles that are assigned to a team.
     *
     * Args:
     *     team_role_assignment_filter_model: All filter parameters including
     *         pagination params.
     *
     * Returns:
     *     A list of all roles that are assigned to a team.
     */
    get: operations["list_role_assignments_for_team_api_v1_teams__team_name_or_id__roles_get"];
  };
  "/api/v1/users": {
    /**
     * List Users
     * @description Returns a list of all users.
     *
     * Args:
     *     user_filter_model: Model that takes care of filtering, sorting and pagination
     *
     * Returns:
     *     A list of all users.
     */
    get: operations["list_users_api_v1_users_get"];
  };
  "/api/v1/users/{user_name_or_id}": {
    /**
     * Get User
     * @description Returns a specific user.
     *
     * Args:
     *     user_name_or_id: Name or ID of the user.
     *
     * Returns:
     *     A specific user.
     */
    get: operations["get_user_api_v1_users__user_name_or_id__get"];
  };
  "/api/v1/users/{user_name_or_id}/roles": {
    /**
     * List Role Assignments For User
     * @description Returns a list of all roles that are assigned to a user.
     *
     * Args:
     *     user_role_assignment_filter_model: filter models for user role assignments
     *
     * Returns:
     *     A list of all roles that are assigned to a user.
     */
    get: operations["list_role_assignments_for_user_api_v1_users__user_name_or_id__roles_get"];
  };
  "/api/v1/current-user": {
    /**
     * Get Current User
     * @description Returns the model of the authenticated user.
     *
     * Args:
     *     auth_context: The authentication context.
     *
     * Returns:
     *     The model of the authenticated user.
     */
    get: operations["get_current_user_api_v1_current_user_get"];
    /**
     * Update Myself
     * @description Updates a specific user.
     *
     * Args:
     *     user: the user to use for the update.
     *     auth_context: The authentication context.
     *
     * Returns:
     *     The updated user.
     */
    put: operations["update_myself_api_v1_current_user_put"];
  };
  "/api/v1/pipeline_builds": {
    /**
     * List Builds
     * @description Gets a list of builds.
     *
     * Args:
     *     build_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     List of build objects.
     */
    get: operations["list_builds_api_v1_pipeline_builds_get"];
  };
  "/api/v1/pipeline_builds/{build_id}": {
    /**
     * Get Build
     * @description Gets a specific build using its unique id.
     *
     * Args:
     *     build_id: ID of the build to get.
     *
     * Returns:
     *     A specific build object.
     */
    get: operations["get_build_api_v1_pipeline_builds__build_id__get"];
    /**
     * Delete Build
     * @description Deletes a specific build.
     *
     * Args:
     *     build_id: ID of the build to delete.
     */
    delete: operations["delete_build_api_v1_pipeline_builds__build_id__delete"];
  };
  "/api/v1/pipeline_deployments": {
    /**
     * List Deployments
     * @description Gets a list of deployment.
     *
     * Args:
     *     deployment_filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     List of deployment objects.
     */
    get: operations["list_deployments_api_v1_pipeline_deployments_get"];
  };
  "/api/v1/pipeline_deployments/{deployment_id}": {
    /**
     * Get Deployment
     * @description Gets a specific deployment using its unique id.
     *
     * Args:
     *     deployment_id: ID of the deployment to get.
     *
     * Returns:
     *     A specific deployment object.
     */
    get: operations["get_deployment_api_v1_pipeline_deployments__deployment_id__get"];
    /**
     * Delete Deployment
     * @description Deletes a specific deployment.
     *
     * Args:
     *     deployment_id: ID of the deployment to delete.
     */
    delete: operations["delete_deployment_api_v1_pipeline_deployments__deployment_id__delete"];
  };
  "/api/v1/code_repositories": {
    /**
     * List Code Repositories
     * @description Gets a page of code repositories.
     *
     * Args:
     *     filter_model: Filter model used for pagination, sorting,
     *         filtering
     *
     * Returns:
     *     Page of code repository objects.
     */
    get: operations["list_code_repositories_api_v1_code_repositories_get"];
  };
  "/api/v1/code_repositories/{code_repository_id}": {
    /**
     * Get Code Repository
     * @description Gets a specific code repository using its unique ID.
     *
     * Args:
     *     code_repository_id: The ID of the code repository to get.
     *
     * Returns:
     *     A specific code repository object.
     */
    get: operations["get_code_repository_api_v1_code_repositories__code_repository_id__get"];
    /**
     * Update Code Repository
     * @description Updates a code repository.
     *
     * Args:
     *     code_repository_id: The ID of the code repository to update.
     *     update: The model containing the attributes to update.
     *
     * Returns:
     *     The updated code repository object.
     */
    put: operations["update_code_repository_api_v1_code_repositories__code_repository_id__put"];
    /**
     * Delete Code Repository
     * @description Deletes a specific code repository.
     *
     * Args:
     *     code_repository_id: The ID of the code repository to delete.
     */
    delete: operations["delete_code_repository_api_v1_code_repositories__code_repository_id__delete"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /**
     * ArtifactConfiguration
     * @description Class representing a complete input/output artifact configuration.
     */
    ArtifactConfiguration: {
      /** Materializer Source */
      materializer_source: components["schemas"]["Source"][];
      default_materializer_source?: components["schemas"]["Source"];
    };
    /**
     * ArtifactNode
     * @description A class that represents an artifact node in a lineage graph.
     */
    ArtifactNode: {
      /** Id */
      id: string;
      /**
       * Type
       * @default artifact
       */
      type?: string;
      data: components["schemas"]["ArtifactNodeDetails"];
    };
    /**
     * ArtifactNodeDetails
     * @description Captures all artifact details for the node.
     */
    ArtifactNodeDetails: {
      /** Execution Id */
      execution_id: string;
      /** Name */
      name: string;
      status: components["schemas"]["ArtifactNodeStatus"];
      /** Is Cached */
      is_cached: boolean;
      /** Artifact Type */
      artifact_type: string;
      /** Artifact Data Type */
      artifact_data_type: string;
      /** Parent Step Id */
      parent_step_id: string;
      /** Producer Step Id */
      producer_step_id?: string;
      /** Uri */
      uri: string;
      /** Metadata */
      metadata: [string, string, string][];
    };
    /**
     * ArtifactNodeStatus
     * @description Enum that represents the status of an artifact.
     * @enum {string}
     */
    ArtifactNodeStatus: "cached" | "created" | "external" | "unknown";
    /**
     * ArtifactRequestModel
     * @description Request model for artifacts.
     */
    ArtifactRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** Name of the output in the parent step. */
      name: string;
      /**
       * ID of the artifact store in which this artifact is stored.
       * Format: uuid
       */
      artifact_store_id?: string;
      /** Type of the artifact. */
      type: components["schemas"]["ArtifactType"];
      /** URI of the artifact. */
      uri: string;
      /** Materializer class to use for this artifact. */
      materializer: components["schemas"]["Source"];
      /** Data type of the artifact. */
      data_type: components["schemas"]["Source"];
      /** Visualizations of the artifact. */
      visualizations?: components["schemas"]["VisualizationModel"][];
    };
    /**
     * ArtifactResponseModel
     * @description Response model for artifacts.
     */
    ArtifactResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** Name of the output in the parent step. */
      name: string;
      /**
       * ID of the artifact store in which this artifact is stored.
       * Format: uuid
       */
      artifact_store_id?: string;
      /** Type of the artifact. */
      type: components["schemas"]["ArtifactType"];
      /** URI of the artifact. */
      uri: string;
      /** Materializer class to use for this artifact. */
      materializer: components["schemas"]["Source"];
      /** Data type of the artifact. */
      data_type: components["schemas"]["Source"];
      /** Visualizations of the artifact. */
      visualizations?: components["schemas"]["VisualizationModel"][];
      /**
       * ID of the step run that produced this artifact.
       * Format: uuid
       */
      producer_step_run_id?: string;
      /**
       * Metadata of the artifact.
       * @default {}
       */
      metadata?: {
        [key: string]: unknown;
      };
    };
    /**
     * ArtifactType
     * @description All possible types an artifact can have.
     * @enum {string}
     */
    ArtifactType: "DataAnalysisArtifact" | "DataArtifact" | "ModelArtifact" | "SchemaArtifact" | "ServiceArtifact" | "StatisticsArtifact" | "BaseArtifact";
    /**
     * AuthScheme
     * @description The authentication scheme.
     * @enum {string}
     */
    AuthScheme: "NO_AUTH" | "HTTP_BASIC" | "OAUTH2_PASSWORD_BEARER" | "EXTERNAL";
    /**
     * AuthenticationMethodModel
     * @description Authentication method specification.
     *
     * Describes the schema for the configuration and secrets that need to be
     * provided to configure an authentication method.
     */
    AuthenticationMethodModel: {
      /** User readable name for the authentication method. */
      name: string;
      /** The name of the authentication method. */
      auth_method: string;
      /**
       * A description of the authentication method.
       * @default
       */
      description?: string;
      /** The JSON schema of the configuration for this authentication method. */
      config_schema?: {
        [key: string]: unknown;
      };
      /** The minimum number of seconds that the authentication session can be configured to be valid for. Set to None for authentication sessions and long-lived credentials that don't expire. */
      min_expiration_seconds?: number;
      /** The maximum number of seconds that the authentication session can be configured to be valid for. Set to None for authentication sessions and long-lived credentials that don't expire. */
      max_expiration_seconds?: number;
      /** The default number of seconds that the authentication session is valid for. Set to None for authentication sessions and long-lived credentials that don't expire. */
      default_expiration_seconds?: number;
    };
    /**
     * AuthenticationResponse
     * @description Authentication response.
     */
    AuthenticationResponse: {
      /** Authorization Url */
      authorization_url?: string;
      /** Access Token */
      access_token?: string;
      /** Token Type */
      token_type?: string;
    };
    /**
     * BaseSettings
     * @description Base class for settings.
     *
     * The `LEVEL` class variable defines on which level the settings can be
     * specified. By default, subclasses can be defined on both pipelines and
     * steps.
     */
    BaseSettings: Record<string, never>;
    /**
     * BuildItem
     * @description Pipeline build item.
     *
     * Attributes:
     *     image: The image name or digest.
     *     dockerfile: The contents of the Dockerfile used to build the image.
     *     requirements: The pip requirements installed in the image. This is a
     *         string consisting of multiple concatenated requirements.txt files.
     *     settings_checksum: Checksum of the settings used for the build.
     *     contains_code: Whether the image contains user files.
     *     requires_code_download: Whether the image needs to download files.
     */
    BuildItem: {
      /** The image name or digest. */
      image: string;
      /** The dockerfile used to build the image. */
      dockerfile?: string;
      /** The pip requirements installed in the image. */
      requirements?: string;
      /** The checksum of the build settings. */
      settings_checksum?: string;
      /**
       * Whether the image contains user files.
       * @default true
       */
      contains_code?: boolean;
      /**
       * Whether the image needs to download files.
       * @default false
       */
      requires_code_download?: boolean;
    };
    /**
     * CodeReferenceRequestModel
     * @description Code reference request model.
     */
    CodeReferenceRequestModel: {
      /**
       * Commit
       * @description The commit of the code reference.
       */
      commit: string;
      /**
       * Subdirectory
       * @description The subdirectory of the code reference.
       */
      subdirectory: string;
      /**
       * Code Repository
       * Format: uuid
       * @description The repository of the code reference.
       */
      code_repository: string;
    };
    /**
     * CodeReferenceResponseModel
     * @description Code reference response model.
     */
    CodeReferenceResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /**
       * Commit
       * @description The commit of the code reference.
       */
      commit: string;
      /**
       * Subdirectory
       * @description The subdirectory of the code reference.
       */
      subdirectory: string;
      /**
       * Code Repository
       * @description The repository of the code reference.
       */
      code_repository: components["schemas"]["CodeRepositoryResponseModel"];
    };
    /**
     * CodeRepositoryRequestModel
     * @description Code repository request model.
     */
    CodeRepositoryRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** The name of the code repository. */
      name: string;
      /**
       * Config
       * @description Configuration for the code repository.
       */
      config: {
        [key: string]: unknown;
      };
      /**
       * Source
       * @description The code repository source.
       */
      source: components["schemas"]["Source"];
      /**
       * Logo Url
       * @description Optional URL of a logo (png, jpg or svg) for the code repository.
       */
      logo_url?: string;
      /**
       * Description
       * @description Code repository description.
       */
      description?: string;
    };
    /**
     * CodeRepositoryResponseModel
     * @description Code repository response model.
     */
    CodeRepositoryResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** The name of the code repository. */
      name: string;
      /**
       * Config
       * @description Configuration for the code repository.
       */
      config: {
        [key: string]: unknown;
      };
      /**
       * Source
       * @description The code repository source.
       */
      source: components["schemas"]["Source"];
      /**
       * Logo Url
       * @description Optional URL of a logo (png, jpg or svg) for the code repository.
       */
      logo_url?: string;
      /**
       * Description
       * @description Code repository description.
       */
      description?: string;
    };
    /**
     * CodeRepositoryUpdateModel
     * @description Code repository update model.
     */
    CodeRepositoryUpdateModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
      /** The name of the code repository. */
      name?: string;
      /**
       * Config
       * @description Configuration for the code repository.
       */
      config?: {
        [key: string]: unknown;
      };
      /**
       * Source
       * @description The code repository source.
       */
      source?: components["schemas"]["Source"];
      /**
       * Logo Url
       * @description Optional URL of a logo (png, jpg or svg) for the code repository.
       */
      logo_url?: string;
      /**
       * Description
       * @description Code repository description.
       */
      description?: string;
    };
    /**
     * ComponentRequestModel
     * @description Request model for stack components.
     */
    ComponentRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /**
       * Flag describing if this resource is shared with other users in the same workspace.
       * @default false
       */
      is_shared?: boolean;
      /** The name of the stack component. */
      name: string;
      /** The type of the stack component. */
      type: components["schemas"]["StackComponentType"];
      /** The flavor of the stack component. */
      flavor: string;
      /** The stack component configuration. */
      configuration: {
        [key: string]: unknown;
      };
      /**
       * Connector Resource Id
       * @description The ID of a specific resource instance to gain access to through the connector
       */
      connector_resource_id?: string;
      /** The stack component labels. */
      labels?: {
        [key: string]: unknown;
      };
      /** The path to the component spec used for mlstacks deployments. */
      component_spec_path?: string;
      /**
       * The service connector linked to this stack component.
       * Format: uuid
       */
      connector?: string;
    };
    /**
     * ComponentResponseModel
     * @description Response model for stack components.
     */
    ComponentResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** Flag describing if this resource is shared with other users in the same workspace. */
      is_shared: boolean;
      /** The name of the stack component. */
      name: string;
      /** The type of the stack component. */
      type: components["schemas"]["StackComponentType"];
      /** The flavor of the stack component. */
      flavor: string;
      /** The stack component configuration. */
      configuration: {
        [key: string]: unknown;
      };
      /**
       * Connector Resource Id
       * @description The ID of a specific resource instance to gain access to through the connector
       */
      connector_resource_id?: string;
      /** The stack component labels. */
      labels?: {
        [key: string]: unknown;
      };
      /** The path to the component spec used for mlstacks deployments. */
      component_spec_path?: string;
      /** The service connector linked to this stack component. */
      connector?: components["schemas"]["ServiceConnectorResponseModel"];
    };
    /**
     * ComponentUpdateModel
     * @description Update model for stack components.
     */
    ComponentUpdateModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
      /**
       * Flag describing if this resource is shared with other users in the same workspace.
       * @default false
       */
      is_shared?: boolean;
      /** The name of the stack component. */
      name?: string;
      /** The type of the stack component. */
      type?: components["schemas"]["StackComponentType"];
      /** The flavor of the stack component. */
      flavor?: string;
      /** The stack component configuration. */
      configuration?: {
        [key: string]: unknown;
      };
      /**
       * Connector Resource Id
       * @description The ID of a specific resource instance to gain access to through the connector
       */
      connector_resource_id?: string;
      /** The stack component labels. */
      labels?: {
        [key: string]: unknown;
      };
      /** The path to the component spec used for mlstacks deployments. */
      component_spec_path?: string;
      /**
       * The service connector linked to this stack component.
       * Format: uuid
       */
      connector?: string;
    };
    /**
     * Edge
     * @description A class that represents an edge in a lineage graph.
     */
    Edge: {
      /** Id */
      id: string;
      /** Source */
      source: string;
      /** Target */
      target: string;
    };
    /**
     * ErrorModel
     * @description Base class for error responses.
     */
    ErrorModel: {
      /** Detail */
      detail?: unknown;
    };
    /**
     * ExecutionStatus
     * @description Enum that represents the current status of a step or pipeline run.
     * @enum {string}
     */
    ExecutionStatus: "failed" | "completed" | "running" | "cached";
    /**
     * FlavorRequestModel
     * @description Request model for stack component flavors.
     */
    FlavorRequestModel: {
      /** The name of the Flavor. */
      name: string;
      /** The type of the Flavor. */
      type: components["schemas"]["StackComponentType"];
      /** The JSON schema of this flavor's corresponding configuration. */
      config_schema: {
        [key: string]: unknown;
      };
      /** The type of the connector that this flavor uses. */
      connector_type?: string;
      /** The resource type of the connector that this flavor uses. */
      connector_resource_type?: string;
      /** The name of an attribute in the stack component configuration that plays the role of resource ID when linked to a service connector. */
      connector_resource_id_attr?: string;
      /** The path to the module which contains this Flavor. */
      source: string;
      /** The name of the integration that the Flavor belongs to. */
      integration?: string;
      /** Optionally, a url pointing to a png,svg or jpg can be attached. */
      logo_url?: string;
      /** Optionally, a url pointing to docs, within docs.zenml.io. */
      docs_url?: string;
      /** Optionally, a url pointing to SDK docs,within sdkdocs.zenml.io. */
      sdk_docs_url?: string;
      /**
       * Whether or not this flavor is a custom, user created flavor.
       * @default true
       */
      is_custom?: boolean;
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
    };
    /**
     * FlavorResponseModel
     * @description Response model for stack component flavors.
     */
    FlavorResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The name of the Flavor. */
      name: string;
      /** The type of the Flavor. */
      type: components["schemas"]["StackComponentType"];
      /** The JSON schema of this flavor's corresponding configuration. */
      config_schema: {
        [key: string]: unknown;
      };
      /** The type of the connector that this flavor uses. */
      connector_type?: string;
      /** The resource type of the connector that this flavor uses. */
      connector_resource_type?: string;
      /** The name of an attribute in the stack component configuration that plays the role of resource ID when linked to a service connector. */
      connector_resource_id_attr?: string;
      /** The path to the module which contains this Flavor. */
      source: string;
      /** The name of the integration that the Flavor belongs to. */
      integration?: string;
      /** Optionally, a url pointing to a png,svg or jpg can be attached. */
      logo_url?: string;
      /** Optionally, a url pointing to docs, within docs.zenml.io. */
      docs_url?: string;
      /** Optionally, a url pointing to SDK docs,within sdkdocs.zenml.io. */
      sdk_docs_url?: string;
      /**
       * Whether or not this flavor is a custom, user created flavor.
       * @default true
       */
      is_custom?: boolean;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The project of this resource. */
      workspace?: components["schemas"]["WorkspaceResponseModel"];
    };
    /**
     * FlavorUpdateModel
     * @description Update model for flavors.
     */
    FlavorUpdateModel: {
      /** The name of the Flavor. */
      name?: string;
      /** The type of the Flavor. */
      type?: components["schemas"]["StackComponentType"];
      /** The JSON schema of this flavor's corresponding configuration. */
      config_schema?: {
        [key: string]: unknown;
      };
      /** The type of the connector that this flavor uses. */
      connector_type?: string;
      /** The resource type of the connector that this flavor uses. */
      connector_resource_type?: string;
      /** The name of an attribute in the stack component configuration that plays the role of resource ID when linked to a service connector. */
      connector_resource_id_attr?: string;
      /** The path to the module which contains this Flavor. */
      source?: string;
      /** The name of the integration that the Flavor belongs to. */
      integration?: string;
      /** Optionally, a url pointing to a png,svg or jpg can be attached. */
      logo_url?: string;
      /** Optionally, a url pointing to docs, within docs.zenml.io. */
      docs_url?: string;
      /** Optionally, a url pointing to SDK docs,within sdkdocs.zenml.io. */
      sdk_docs_url?: string;
      /**
       * Whether or not this flavor is a custom, user created flavor.
       * @default true
       */
      is_custom?: boolean;
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * InputSpec
     * @description Step input specification.
     */
    InputSpec: {
      /** Step Name */
      step_name: string;
      /** Output Name */
      output_name: string;
    };
    /**
     * LineageGraph
     * @description A lineage graph representation of a PipelineRunResponseModel.
     */
    LineageGraph: {
      /**
       * Nodes
       * @default []
       */
      nodes?: (components["schemas"]["StepNode"] | components["schemas"]["ArtifactNode"])[];
      /**
       * Edges
       * @default []
       */
      edges?: components["schemas"]["Edge"][];
      /** Root Step Id */
      root_step_id?: string;
      /**
       * Run Metadata
       * @default []
       */
      run_metadata?: [string, string, string][];
    };
    /**
     * LoadedVisualizationModel
     * @description Model for loaded visualization.
     */
    LoadedVisualizationModel: {
      type: components["schemas"]["VisualizationType"];
      /** Value */
      value: string;
    };
    /**
     * LogicalOperators
     * @description Logical Ops to use to combine filters on list methods.
     * @enum {string}
     */
    LogicalOperators: "or" | "and";
    /**
     * LogsRequestModel
     * @description Request model for logs.
     */
    LogsRequestModel: {
      /** The uri of the logs file */
      uri: string;
      /** The artifact store ID to associate the logs with. */
      artifact_store_id: string;
    };
    /**
     * LogsResponseModel
     * @description Response model for logs.
     */
    LogsResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The uri of the logs file */
      uri: string;
      /** The artifact store ID to associate the logs with. */
      artifact_store_id: string;
      /**
       * Step ID to associate the logs with.
       * @description When this is set, pipeline_run_id should be set to None.
       */
      step_run_id?: string;
      /**
       * Pipeline run ID to associate the logs with.
       * @description When this is set, step_run_id should be set to None.
       */
      pipeline_run_id?: string;
    };
    /**
     * MetadataTypeEnum
     * @description String Enum of all possible types that metadata can have.
     * @enum {string}
     */
    MetadataTypeEnum: "str" | "int" | "float" | "bool" | "list" | "dict" | "tuple" | "set" | "Uri" | "Path" | "DType" | "StorageSize";
    /**
     * Page[ArtifactResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_ArtifactResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["ArtifactResponseModel"][];
    };
    /**
     * Page[CodeRepositoryResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_CodeRepositoryResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["CodeRepositoryResponseModel"][];
    };
    /**
     * Page[ComponentResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_ComponentResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["ComponentResponseModel"][];
    };
    /**
     * Page[FlavorResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_FlavorResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["FlavorResponseModel"][];
    };
    /**
     * Page[PipelineBuildResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_PipelineBuildResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["PipelineBuildResponseModel"][];
    };
    /**
     * Page[PipelineDeploymentResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_PipelineDeploymentResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["PipelineDeploymentResponseModel"][];
    };
    /**
     * Page[PipelineResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_PipelineResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["PipelineResponseModel"][];
    };
    /**
     * Page[PipelineRunResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_PipelineRunResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["PipelineRunResponseModel"][];
    };
    /**
     * Page[RoleResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_RoleResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["RoleResponseModel"][];
    };
    /**
     * Page[RunMetadataResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_RunMetadataResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["RunMetadataResponseModel"][];
    };
    /**
     * Page[ScheduleResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_ScheduleResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["ScheduleResponseModel"][];
    };
    /**
     * Page[SecretResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_SecretResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["SecretResponseModel"][];
    };
    /**
     * Page[ServiceConnectorResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_ServiceConnectorResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["ServiceConnectorResponseModel"][];
    };
    /**
     * Page[StackResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_StackResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["StackResponseModel"][];
    };
    /**
     * Page[StepRunResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_StepRunResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["StepRunResponseModel"][];
    };
    /**
     * Page[TeamResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_TeamResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["TeamResponseModel"][];
    };
    /**
     * Page[TeamRoleAssignmentResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_TeamRoleAssignmentResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["TeamRoleAssignmentResponseModel"][];
    };
    /**
     * Page[UserResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_UserResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["UserResponseModel"][];
    };
    /**
     * Page[UserRoleAssignmentResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_UserRoleAssignmentResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["UserRoleAssignmentResponseModel"][];
    };
    /**
     * Page[WorkspaceResponseModel]
     * @description Return Model for List Models to accommodate pagination.
     */
    Page_WorkspaceResponseModel_: {
      /** Index */
      index: number;
      /** Max Size */
      max_size: number;
      /** Total Pages */
      total_pages: number;
      /** Total */
      total: number;
      /** Items */
      items: components["schemas"]["WorkspaceResponseModel"][];
    };
    /**
     * PermissionType
     * @description All permission types.
     * @enum {string}
     */
    PermissionType: "write" | "read" | "me";
    /**
     * PipelineBuildRequestModel
     * @description Request model for pipelines builds.
     */
    PipelineBuildRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /**
       * The images of this build.
       * @default {}
       */
      images?: {
        [key: string]: unknown;
      };
      /** Whether the build images are stored in a container registry or locally. */
      is_local: boolean;
      /** Whether any image of the build contains user code. */
      contains_code: boolean;
      /** The version of ZenML used for this build. */
      zenml_version?: string;
      /** The Python version used for this build. */
      python_version?: string;
      /** The build checksum. */
      checksum?: string;
      /**
       * The stack that was used for this build.
       * Format: uuid
       */
      stack?: string;
      /**
       * The pipeline that was used for this build.
       * Format: uuid
       */
      pipeline?: string;
    };
    /**
     * PipelineBuildResponseModel
     * @description Response model for pipeline builds.
     */
    PipelineBuildResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /**
       * The images of this build.
       * @default {}
       */
      images?: {
        [key: string]: unknown;
      };
      /** Whether the build images are stored in a container registry or locally. */
      is_local: boolean;
      /** Whether any image of the build contains user code. */
      contains_code: boolean;
      /** The version of ZenML used for this build. */
      zenml_version?: string;
      /** The Python version used for this build. */
      python_version?: string;
      /** The build checksum. */
      checksum?: string;
      /** The pipeline that was used for this build. */
      pipeline?: components["schemas"]["PipelineResponseModel"];
      /** The stack that was used for this build. */
      stack?: components["schemas"]["StackResponseModel"];
    };
    /**
     * PipelineConfiguration
     * @description Pipeline configuration class.
     */
    PipelineConfiguration: {
      /** Enable Cache */
      enable_cache?: boolean;
      /** Enable Artifact Metadata */
      enable_artifact_metadata?: boolean;
      /** Enable Artifact Visualization */
      enable_artifact_visualization?: boolean;
      /** Enable Step Logs */
      enable_step_logs?: boolean;
      /**
       * Settings
       * @default {}
       */
      settings?: {
        [key: string]: unknown;
      };
      /**
       * Extra
       * @default {}
       */
      extra?: {
        [key: string]: unknown;
      };
      failure_hook_source?: components["schemas"]["Source"];
      success_hook_source?: components["schemas"]["Source"];
      /** Name */
      name: string;
    };
    /**
     * PipelineDeploymentRequestModel
     * @description Request model for pipeline deployments.
     */
    PipelineDeploymentRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** The run name template for runs created using this deployment. */
      run_name_template: string;
      /** The pipeline configuration for this deployment. */
      pipeline_configuration: components["schemas"]["PipelineConfiguration"];
      /**
       * The step configurations for this deployment.
       * @default {}
       */
      step_configurations?: {
        [key: string]: unknown;
      };
      /**
       * The client environment for this deployment.
       * @default {}
       */
      client_environment?: {
        [key: string]: unknown;
      };
      /**
       * The stack associated with the deployment.
       * Format: uuid
       */
      stack: string;
      /**
       * The pipeline associated with the deployment.
       * Format: uuid
       */
      pipeline?: string;
      /**
       * The build associated with the deployment.
       * Format: uuid
       */
      build?: string;
      /**
       * The schedule associated with the deployment.
       * Format: uuid
       */
      schedule?: string;
      /** The code reference associated with the deployment. */
      code_reference?: components["schemas"]["CodeReferenceRequestModel"];
    };
    /**
     * PipelineDeploymentResponseModel
     * @description Response model for pipeline deployments.
     */
    PipelineDeploymentResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** The run name template for runs created using this deployment. */
      run_name_template: string;
      /** The pipeline configuration for this deployment. */
      pipeline_configuration: components["schemas"]["PipelineConfiguration"];
      /**
       * The step configurations for this deployment.
       * @default {}
       */
      step_configurations?: {
        [key: string]: unknown;
      };
      /**
       * The client environment for this deployment.
       * @default {}
       */
      client_environment?: {
        [key: string]: unknown;
      };
      /** The pipeline associated with the deployment. */
      pipeline?: components["schemas"]["PipelineResponseModel"];
      /** The stack associated with the deployment. */
      stack?: components["schemas"]["StackResponseModel"];
      /** The pipeline build associated with the deployment. */
      build?: components["schemas"]["PipelineBuildResponseModel"];
      /** The schedule associated with the deployment. */
      schedule?: components["schemas"]["ScheduleResponseModel"];
      /** The code reference associated with the deployment. */
      code_reference?: components["schemas"]["CodeReferenceResponseModel"];
    };
    /**
     * PipelineRequestModel
     * @description Pipeline request model.
     */
    PipelineRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** The name of the pipeline. */
      name: string;
      /** The version of the pipeline. */
      version: string;
      /** The version hash of the pipeline. */
      version_hash: string;
      /** The docstring of the pipeline. */
      docstring?: string;
      /** The spec of the pipeline. */
      spec: components["schemas"]["PipelineSpec"];
    };
    /**
     * PipelineResponseModel
     * @description Pipeline response model user, workspace, runs, and status hydrated.
     */
    PipelineResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** The name of the pipeline. */
      name: string;
      /** The version of the pipeline. */
      version: string;
      /** The version hash of the pipeline. */
      version_hash: string;
      /** The docstring of the pipeline. */
      docstring?: string;
      /** The spec of the pipeline. */
      spec: components["schemas"]["PipelineSpec"];
      /** The status of the last 3 Pipeline Runs. */
      status?: components["schemas"]["ExecutionStatus"][];
    };
    /**
     * PipelineRunRequestModel
     * @description Pipeline run model with user, workspace, pipeline, and stack as UUIDs.
     */
    PipelineRunRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** The name of the pipeline run. */
      name: string;
      /** The orchestrator run ID. */
      orchestrator_run_id?: string;
      /**
       * The ID of the schedule that triggered this pipeline run.
       * Format: uuid
       */
      schedule_id?: string;
      /** Whether to enable caching for this pipeline run. */
      enable_cache?: boolean;
      /**
       * The start time of the pipeline run.
       * Format: date-time
       */
      start_time?: string;
      /**
       * The end time of the pipeline run.
       * Format: date-time
       */
      end_time?: string;
      /** The status of the pipeline run. */
      status: components["schemas"]["ExecutionStatus"];
      /** The pipeline configuration used for this pipeline run. */
      config: components["schemas"]["PipelineConfiguration"];
      /** The number of steps in this pipeline run. */
      num_steps?: number;
      /**
       * Client version.
       * @default 0.44.2
       */
      client_version?: string;
      /** Server version. */
      server_version?: string;
      /**
       * Environment of the client that initiated this pipeline run (OS, Python version, etc.).
       * @default {}
       */
      client_environment?: {
        [key: string]: unknown;
      };
      /**
       * Environment of the orchestrator that executed this pipeline run (OS, Python version, etc.).
       * @default {}
       */
      orchestrator_environment?: {
        [key: string]: unknown;
      };
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Stack
       * Format: uuid
       */
      stack?: string;
      /**
       * Pipeline
       * Format: uuid
       */
      pipeline?: string;
      /**
       * Build
       * Format: uuid
       */
      build?: string;
      /**
       * Deployment
       * Format: uuid
       */
      deployment?: string;
    };
    /**
     * PipelineRunResponseModel
     * @description Pipeline run model with user, workspace, pipeline, and stack hydrated.
     */
    PipelineRunResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** The name of the pipeline run. */
      name: string;
      /** The orchestrator run ID. */
      orchestrator_run_id?: string;
      /**
       * The ID of the schedule that triggered this pipeline run.
       * Format: uuid
       */
      schedule_id?: string;
      /** Whether to enable caching for this pipeline run. */
      enable_cache?: boolean;
      /**
       * The start time of the pipeline run.
       * Format: date-time
       */
      start_time?: string;
      /**
       * The end time of the pipeline run.
       * Format: date-time
       */
      end_time?: string;
      /** The status of the pipeline run. */
      status: components["schemas"]["ExecutionStatus"];
      /** The pipeline configuration used for this pipeline run. */
      config: components["schemas"]["PipelineConfiguration"];
      /** The number of steps in this pipeline run. */
      num_steps?: number;
      /**
       * Client version.
       * @default 0.44.2
       */
      client_version?: string;
      /** Server version. */
      server_version?: string;
      /**
       * Environment of the client that initiated this pipeline run (OS, Python version, etc.).
       * @default {}
       */
      client_environment?: {
        [key: string]: unknown;
      };
      /**
       * Environment of the orchestrator that executed this pipeline run (OS, Python version, etc.).
       * @default {}
       */
      orchestrator_environment?: {
        [key: string]: unknown;
      };
      /** The pipeline this run belongs to. */
      pipeline?: components["schemas"]["PipelineResponseModel"];
      /** The stack that was used for this run. */
      stack?: components["schemas"]["StackResponseModel"];
      /**
       * Metadata associated with this pipeline run.
       * @default {}
       */
      metadata?: {
        [key: string]: unknown;
      };
      /** The pipeline build that was used for this run. */
      build?: components["schemas"]["PipelineBuildResponseModel"];
      /** The deployment that was used for this run. */
      deployment?: components["schemas"]["PipelineDeploymentResponseModel"];
      /**
       * The steps of this run.
       * @default {}
       */
      steps?: {
        [key: string]: unknown;
      };
    };
    /**
     * PipelineRunUpdateModel
     * @description Pipeline run update model.
     */
    PipelineRunUpdateModel: {
      status?: components["schemas"]["ExecutionStatus"];
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string;
    };
    /**
     * PipelineSpec
     * @description Specification of a pipeline.
     */
    PipelineSpec: {
      /**
       * Version
       * @default 0.4
       */
      version?: string;
      source?: components["schemas"]["Source"];
      /**
       * Parameters
       * @default {}
       */
      parameters?: {
        [key: string]: unknown;
      };
      /** Steps */
      steps: components["schemas"]["StepSpec"][];
    };
    /**
     * PipelineUpdateModel
     * @description Pipeline update model.
     */
    PipelineUpdateModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
      /** The name of the pipeline. */
      name?: string;
      /** The version of the pipeline. */
      version?: string;
      /** The version hash of the pipeline. */
      version_hash?: string;
      /** The docstring of the pipeline. */
      docstring?: string;
      /** The spec of the pipeline. */
      spec?: components["schemas"]["PipelineSpec"];
    };
    /**
     * ResourceTypeModel
     * @description Resource type specification.
     *
     * Describes the authentication methods and resource instantiation model for
     * one or more resource types.
     */
    ResourceTypeModel: {
      /** User readable name for the resource type. */
      name: string;
      /** Resource type identifier. */
      resource_type: string;
      /**
       * A description of the resource type.
       * @default
       */
      description?: string;
      /** The list of authentication methods that can be used to access resources of this type. */
      auth_methods: string[];
      /**
       * Specifies if a single connector instance can be used to access multiple instances of this resource type. If set to True, the connector is able to provide a list of resource IDs identifying all the resources that it can access and a resource ID needs to be explicitly configured or supplied when access to a resource is requested. If set to False, a connector instance is only able to access a single resource and a resource ID is not required to access the resource.
       * @default false
       */
      supports_instances?: boolean;
      /** Optionally, a URL pointing to a png,svg or jpg file can be attached. */
      logo_url?: string;
      /** Optionally, a python-rich emoji can be attached. */
      emoji?: string;
    };
    /**
     * RoleRequestModel
     * @description Request model for roles.
     */
    RoleRequestModel: {
      /** The unique name of the role. */
      name: string;
      permissions: components["schemas"]["PermissionType"][];
    };
    /**
     * RoleResponseModel
     * @description Response model for roles.
     */
    RoleResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The unique name of the role. */
      name: string;
      permissions: components["schemas"]["PermissionType"][];
    };
    /**
     * RoleUpdateModel
     * @description Update model for roles.
     */
    RoleUpdateModel: {
      /** The unique name of the role. */
      name?: string;
      permissions?: components["schemas"]["PermissionType"][];
    };
    /**
     * RunMetadataRequestModel
     * @description Request model for run metadata.
     */
    RunMetadataRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /**
       * The ID of the pipeline run that this metadata belongs to.
       * Format: uuid
       */
      pipeline_run_id?: string;
      /**
       * Step Run Id
       * Format: uuid
       */
      step_run_id?: string;
      /**
       * Artifact Id
       * Format: uuid
       */
      artifact_id?: string;
      /**
       * Stack Component Id
       * Format: uuid
       */
      stack_component_id?: string;
      /** The key of the metadata. */
      key: string;
      /** The value of the metadata. */
      value: string | number | boolean | {
        [key: string]: unknown;
      } | unknown[];
      /** The type of the metadata. */
      type: string;
    };
    /**
     * RunMetadataResponseModel
     * @description Response model for run metadata.
     */
    RunMetadataResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /**
       * The ID of the pipeline run that this metadata belongs to.
       * Format: uuid
       */
      pipeline_run_id?: string;
      /**
       * Step Run Id
       * Format: uuid
       */
      step_run_id?: string;
      /**
       * Artifact Id
       * Format: uuid
       */
      artifact_id?: string;
      /**
       * Stack Component Id
       * Format: uuid
       */
      stack_component_id?: string;
      /** The key of the metadata. */
      key: string;
      /** The value of the metadata. */
      value: string | number | boolean | {
        [key: string]: unknown;
      } | unknown[];
      /** The type of the metadata. */
      type: string;
    };
    /**
     * ScheduleRequestModel
     * @description Schedule request model.
     */
    ScheduleRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** Name */
      name: string;
      /** Cron Expression */
      cron_expression?: string;
      /**
       * Start Time
       * Format: date-time
       */
      start_time?: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string;
      /**
       * Interval Second
       * Format: time-delta
       */
      interval_second?: number;
      /**
       * Catchup
       * @default false
       */
      catchup?: boolean;
      /** Active */
      active: boolean;
      /**
       * Orchestrator Id
       * Format: uuid
       */
      orchestrator_id?: string;
      /**
       * Pipeline Id
       * Format: uuid
       */
      pipeline_id?: string;
    };
    /**
     * ScheduleResponseModel
     * @description Schedule response model with workspace and user hydrated.
     */
    ScheduleResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** Name */
      name: string;
      /** Cron Expression */
      cron_expression?: string;
      /**
       * Start Time
       * Format: date-time
       */
      start_time?: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string;
      /**
       * Interval Second
       * Format: time-delta
       */
      interval_second?: number;
      /**
       * Catchup
       * @default false
       */
      catchup?: boolean;
      /** Active */
      active: boolean;
      /**
       * Orchestrator Id
       * Format: uuid
       */
      orchestrator_id?: string;
      /**
       * Pipeline Id
       * Format: uuid
       */
      pipeline_id?: string;
    };
    /**
     * ScheduleUpdateModel
     * @description Schedule update model.
     */
    ScheduleUpdateModel: {
      /** Name */
      name?: string;
      /** Active */
      active?: boolean;
      /** Cron Expression */
      cron_expression?: string;
      /**
       * Start Time
       * Format: date-time
       */
      start_time?: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string;
      /**
       * Interval Second
       * Format: time-delta
       */
      interval_second?: number;
      /** Catchup */
      catchup?: boolean;
    };
    /**
     * SecretRequestModel
     * @description Secret request model.
     */
    SecretRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** The name of the secret. */
      name: string;
      /**
       * The scope of the secret.
       * @default workspace
       */
      scope?: components["schemas"]["SecretScope"];
      /** The values stored in this secret. */
      values?: {
        [key: string]: unknown;
      };
    };
    /**
     * SecretResponseModel
     * @description Secret response model with user and workspace hydrated.
     */
    SecretResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** The name of the secret. */
      name: string;
      /**
       * The scope of the secret.
       * @default workspace
       */
      scope?: components["schemas"]["SecretScope"];
      /** The values stored in this secret. */
      values?: {
        [key: string]: unknown;
      };
    };
    /**
     * SecretScope
     * @description Enum for the scope of a secret.
     * @enum {string}
     */
    SecretScope: "workspace" | "user";
    /**
     * SecretUpdateModel
     * @description Secret update model.
     */
    SecretUpdateModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
      /** The name of the secret. */
      name?: string;
      /** The scope of the secret. */
      scope?: components["schemas"]["SecretScope"];
      /** The values stored in this secret. */
      values?: {
        [key: string]: unknown;
      };
    };
    /**
     * SecretsStoreType
     * @description Secrets Store Backend Types.
     *
     * NOTE: this is a superset of the StoreType values because the set of secrets
     * store backends includes all the backends supported for zen stores.
     * @enum {string}
     */
    SecretsStoreType: "none" | "sql" | "rest" | "aws" | "gcp" | "azure" | "hashicorp" | "custom";
    /**
     * ServerDatabaseType
     * @description Enum for server database types.
     * @enum {string}
     */
    ServerDatabaseType: "sqlite" | "mysql" | "other";
    /**
     * ServerDeploymentType
     * @description Enum for server deployment types.
     * @enum {string}
     */
    ServerDeploymentType: "local" | "docker" | "kubernetes" | "aws" | "gcp" | "azure" | "alpha" | "other" | "hf_spaces" | "sandbox" | "cloud";
    /**
     * ServerModel
     * @description Domain model for ZenML servers.
     */
    ServerModel: {
      /**
       * The unique server id.
       * Format: uuid
       */
      id?: string;
      /** The ZenML version that the server is running. */
      version: string;
      /**
       * Flag to indicate whether ZenML is running on debug mode.
       * @default false
       */
      debug?: boolean;
      /**
       * The ZenML server deployment type.
       * @default other
       */
      deployment_type?: components["schemas"]["ServerDeploymentType"];
      /**
       * The database type that the server is using.
       * @default other
       */
      database_type?: components["schemas"]["ServerDatabaseType"];
      /**
       * The type of secrets store that the server is using.
       * @default none
       */
      secrets_store_type?: components["schemas"]["SecretsStoreType"];
      /** The authentication scheme that the server is using. */
      auth_scheme: components["schemas"]["AuthScheme"];
    };
    /**
     * ServiceConnectorRequestModel
     * @description Request model for service connectors.
     */
    ServiceConnectorRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /**
       * Flag describing if this resource is shared with other users in the same workspace.
       * @default false
       */
      is_shared?: boolean;
      /** The service connector name. */
      name: string;
      /** The type of service connector. */
      connector_type: string | components["schemas"]["ServiceConnectorTypeModel"];
      /**
       * The service connector instance description.
       * @default
       */
      description?: string;
      /** The authentication method that the connector instance uses to access the resources. */
      auth_method: string;
      /** The type(s) of resource that the connector instance can be used to gain access to. */
      resource_types?: string[];
      /** Uniquely identifies a specific resource instance that the connector instance can be used to access. If omitted, the connector instance can be used to access any and all resource instances that the authentication method and resource type(s) allow. */
      resource_id?: string;
      /**
       * Indicates whether the connector instance can be used to access multiple instances of the configured resource type.
       * @default false
       */
      supports_instances?: boolean;
      /**
       * Time when the authentication credentials configured for the connector expire. If omitted, the credentials do not expire.
       * Format: date-time
       */
      expires_at?: string;
      /** The duration, in seconds, that the temporary credentials generated by this connector should remain valid. Only applicable for connectors and authentication methods that involve generating temporary credentials from the ones configured in the connector. */
      expiration_seconds?: number;
      /** The service connector configuration, not including secrets. */
      configuration?: {
        [key: string]: unknown;
      };
      /** The service connector secrets. */
      secrets?: {
        [key: string]: unknown;
      };
      /** Service connector labels. */
      labels?: {
        [key: string]: unknown;
      };
    };
    /**
     * ServiceConnectorResourcesModel
     * @description Service connector resources list.
     *
     * Lists the resource types and resource instances that a service connector
     * can provide access to.
     */
    ServiceConnectorResourcesModel: {
      /**
       * The ID of the service connector instance providing this resource.
       * Format: uuid
       */
      id?: string;
      /** The name of the service connector instance providing this resource. */
      name?: string;
      /** The type of service connector. */
      connector_type: string | components["schemas"]["ServiceConnectorTypeModel"];
      /** The list of resources that the service connector instance can give access to. Contains one entry for every resource type that the connector is configured for. */
      resources?: components["schemas"]["ServiceConnectorTypedResourcesModel"][];
      /** A global error message describing why the service connector instance could not authenticate to the remote service. */
      error?: string;
    };
    /**
     * ServiceConnectorResponseModel
     * @description Response model for service connectors.
     */
    ServiceConnectorResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** Flag describing if this resource is shared with other users in the same workspace. */
      is_shared: boolean;
      /** The service connector name. */
      name: string;
      /** The type of service connector. */
      connector_type: string | components["schemas"]["ServiceConnectorTypeModel"];
      /**
       * The service connector instance description.
       * @default
       */
      description?: string;
      /** The authentication method that the connector instance uses to access the resources. */
      auth_method: string;
      /** The type(s) of resource that the connector instance can be used to gain access to. */
      resource_types?: string[];
      /** Uniquely identifies a specific resource instance that the connector instance can be used to access. If omitted, the connector instance can be used to access any and all resource instances that the authentication method and resource type(s) allow. */
      resource_id?: string;
      /**
       * Indicates whether the connector instance can be used to access multiple instances of the configured resource type.
       * @default false
       */
      supports_instances?: boolean;
      /**
       * Time when the authentication credentials configured for the connector expire. If omitted, the credentials do not expire.
       * Format: date-time
       */
      expires_at?: string;
      /** The duration, in seconds, that the temporary credentials generated by this connector should remain valid. Only applicable for connectors and authentication methods that involve generating temporary credentials from the ones configured in the connector. */
      expiration_seconds?: number;
      /** The service connector configuration, not including secrets. */
      configuration?: {
        [key: string]: unknown;
      };
      /** The service connector secrets. */
      secrets?: {
        [key: string]: unknown;
      };
      /** Service connector labels. */
      labels?: {
        [key: string]: unknown;
      };
      /**
       * The ID of the secret that contains the service connector secret configuration values.
       * Format: uuid
       */
      secret_id?: string;
    };
    /**
     * ServiceConnectorTypeModel
     * @description Service connector type specification.
     *
     * Describes the types of resources to which the service connector can be used
     * to gain access and the authentication methods that are supported by the
     * service connector.
     *
     * The connector type, resource types, resource IDs and authentication
     * methods can all be used as search criteria to lookup and filter service
     * connector instances that are compatible with the requirements of a consumer
     * (e.g. a stack component).
     */
    ServiceConnectorTypeModel: {
      /** User readable name for the service connector type. */
      name: string;
      /** The type of service connector. It can be used to represent a generic resource (e.g. Docker, Kubernetes) or a group of different resources accessible through a common interface or point of access and authentication (e.g. a cloud provider or a platform). */
      connector_type: string;
      /**
       * A description of the service connector.
       * @default
       */
      description?: string;
      /** A list of resource types that the connector can be used to access. */
      resource_types: components["schemas"]["ResourceTypeModel"][];
      /** A list of specifications describing the authentication methods that are supported by the service connector, along with the configuration and secrets attributes that need to be configured for them. */
      auth_methods: components["schemas"]["AuthenticationMethodModel"][];
      /**
       * Models if the connector can be configured automatically based on information extracted from a local environment.
       * @default false
       */
      supports_auto_configuration?: boolean;
      /** Optionally, a URL pointing to a png,svg or jpg can be attached. */
      logo_url?: string;
      /** Optionally, a python-rich emoji can be attached. */
      emoji?: string;
      /** Optionally, a URL pointing to docs, within docs.zenml.io. */
      docs_url?: string;
      /** Optionally, a URL pointing to SDK docs,within sdkdocs.zenml.io. */
      sdk_docs_url?: string;
      /**
       * If True, the service connector is available locally.
       * @default true
       */
      local?: boolean;
      /**
       * If True, the service connector is available remotely.
       * @default false
       */
      remote?: boolean;
    };
    /**
     * ServiceConnectorTypedResourcesModel
     * @description Service connector typed resources list.
     *
     * Lists the resource instances that a service connector can provide
     * access to.
     */
    ServiceConnectorTypedResourcesModel: {
      /** The type of resource that the service connector instance can be used to access. */
      resource_type: string;
      /** The resource IDs of all resource instances that the service connector instance can be used to access. Omitted (set to None) for multi-type service connectors that didn't explicitly request to fetch resources for all resource types. Also omitted if an error occurred while listing the resource instances or if no resources are listed due to authorization issues or lack of permissions (in both cases the 'error' field is set to an error message). For resource types that do not support multiple instances, a single resource ID is listed. */
      resource_ids?: string[];
      /** An error message describing why the service connector instance could not list the resources that it is configured to access. */
      error?: string;
    };
    /**
     * ServiceConnectorUpdateModel
     * @description Model used for service connector updates.
     *
     * Most fields in the update model are optional and will not be updated if
     * omitted. However, the following fields are "special" and leaving them out
     * will also cause the corresponding value to be removed from the service
     * connector in the database:
     *
     * * the `resource_id` field
     * * the `expiration_seconds` field
     *
     * In addition to the above exceptions, the following rules apply:
     *
     * * the `configuration` and `secrets` fields together represent a full
     * valid configuration update, not just a partial update. If either is
     * set (i.e. not None) in the update, their values are merged together and
     * will replace the existing configuration and secrets values.
     * * the `secret_id` field value in the update is ignored, given that
     * secrets are managed internally by the ZenML store.
     * * the `labels` field is also a full labels update: if set (i.e. not
     * `None`), all existing labels are removed and replaced by the new labels
     * in the update.
     */
    ServiceConnectorUpdateModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
      /**
       * Flag describing if this resource is shared with other users in the same workspace.
       * @default false
       */
      is_shared?: boolean;
      /** The service connector name. */
      name?: string;
      /** The type of service connector. */
      connector_type?: string | components["schemas"]["ServiceConnectorTypeModel"];
      /**
       * The service connector instance description.
       * @default
       */
      description?: string;
      /** The authentication method that the connector instance uses to access the resources. */
      auth_method?: string;
      /** The type(s) of resource that the connector instance can be used to gain access to. */
      resource_types?: string[];
      /** Uniquely identifies a specific resource instance that the connector instance can be used to access. If omitted, the connector instance can be used to access any and all resource instances that the authentication method and resource type(s) allow. */
      resource_id?: string;
      /**
       * Indicates whether the connector instance can be used to access multiple instances of the configured resource type.
       * @default false
       */
      supports_instances?: boolean;
      /**
       * Time when the authentication credentials configured for the connector expire. If omitted, the credentials do not expire.
       * Format: date-time
       */
      expires_at?: string;
      /** The duration, in seconds, that the temporary credentials generated by this connector should remain valid. Only applicable for connectors and authentication methods that involve generating temporary credentials from the ones configured in the connector. */
      expiration_seconds?: number;
      /** The service connector configuration, not including secrets. */
      configuration?: {
        [key: string]: unknown;
      };
      /** The service connector secrets. */
      secrets?: {
        [key: string]: unknown;
      };
      /** Service connector labels. */
      labels?: {
        [key: string]: unknown;
      };
    };
    /**
     * Source
     * @description Source specification.
     *
     * A source specifies a module name as well as an optional attribute of that
     * module. These values can be used to import the module and get the value
     * of the attribute inside the module.
     *
     * Example:
     *     The source `Source(module="zenml.config.source", attribute="Source")`
     *     references the class that this docstring is describing. This class is
     *     defined in the `zenml.config.source` module and the name of the
     *     attribute is the class name `Source`.
     *
     * Attributes:
     *     module: The module name.
     *     attribute: Optional name of the attribute inside the module.
     *     type: The type of the source.
     */
    Source: {
      /** Module */
      module: string;
      /** Attribute */
      attribute?: string;
      type: components["schemas"]["SourceType"];
    };
    /**
     * SourceType
     * @description Enum representing different types of sources.
     * @enum {unknown}
     */
    SourceType: "user" | "builtin" | "internal" | "distribution_package" | "code_repository" | "unknown";
    /**
     * StackComponentType
     * @description All possible types a `StackComponent` can have.
     * @enum {string}
     */
    StackComponentType: "alerter" | "annotator" | "artifact_store" | "container_registry" | "data_validator" | "experiment_tracker" | "feature_store" | "image_builder" | "model_deployer" | "orchestrator" | "secrets_manager" | "step_operator" | "model_registry";
    /**
     * StackRequestModel
     * @description Stack model with components, user and workspace as UUIDs.
     */
    StackRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /**
       * Flag describing if this resource is shared with other users in the same workspace.
       * @default false
       */
      is_shared?: boolean;
      /** The name of the stack. */
      name: string;
      /**
       * The description of the stack
       * @default
       */
      description?: string;
      /** The path to the stack spec used for mlstacks deployments. */
      stack_spec_path?: string;
      /** A mapping of stack component types to the actualinstances of components of this type. */
      components?: {
        [key: string]: unknown;
      };
    };
    /**
     * StackResponseModel
     * @description Stack model with Components, User and Workspace fully hydrated.
     */
    StackResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** Flag describing if this resource is shared with other users in the same workspace. */
      is_shared: boolean;
      /** The name of the stack. */
      name: string;
      /**
       * The description of the stack
       * @default
       */
      description?: string;
      /** The path to the stack spec used for mlstacks deployments. */
      stack_spec_path?: string;
      /** A mapping of stack component types to the actualinstances of components of this type. */
      components: {
        [key: string]: unknown;
      };
    };
    /**
     * StackUpdateModel
     * @description The update model for stacks.
     */
    StackUpdateModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user?: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace?: string;
      /**
       * Flag describing if this resource is shared with other users in the same workspace.
       * @default false
       */
      is_shared?: boolean;
      /** The name of the stack. */
      name?: string;
      /**
       * The description of the stack
       * @default
       */
      description?: string;
      /** The path to the stack spec used for mlstacks deployments. */
      stack_spec_path?: string;
      /** A mapping of stack component types to the actualinstances of components of this type. */
      components?: {
        [key: string]: unknown;
      };
    };
    /**
     * Step
     * @description Class representing a ZenML step.
     */
    Step: {
      spec: components["schemas"]["StepSpec"];
      config: components["schemas"]["StepConfiguration"];
    };
    /**
     * StepConfiguration
     * @description Step configuration class.
     */
    StepConfiguration: {
      /** Name */
      name: string;
      /** Enable Cache */
      enable_cache?: boolean;
      /** Enable Artifact Metadata */
      enable_artifact_metadata?: boolean;
      /** Enable Artifact Visualization */
      enable_artifact_visualization?: boolean;
      /** Enable Step Logs */
      enable_step_logs?: boolean;
      /** Step Operator */
      step_operator?: string;
      /** Experiment Tracker */
      experiment_tracker?: string;
      /**
       * Parameters
       * @default {}
       */
      parameters?: {
        [key: string]: unknown;
      };
      /**
       * Settings
       * @default {}
       */
      settings?: {
        [key: string]: unknown;
      };
      /**
       * Extra
       * @default {}
       */
      extra?: {
        [key: string]: unknown;
      };
      failure_hook_source?: components["schemas"]["Source"];
      success_hook_source?: components["schemas"]["Source"];
      /**
       * Outputs
       * @default {}
       */
      outputs?: {
        [key: string]: unknown;
      };
      /**
       * Caching Parameters
       * @default {}
       */
      caching_parameters?: {
        [key: string]: unknown;
      };
      /**
       * External Input Artifacts
       * @default {}
       */
      external_input_artifacts?: {
        [key: string]: unknown;
      };
    };
    /**
     * StepNode
     * @description A class that represents a step node in a lineage graph.
     */
    StepNode: {
      /** Id */
      id: string;
      /**
       * Type
       * @default step
       */
      type?: string;
      data: components["schemas"]["StepNodeDetails"];
    };
    /**
     * StepNodeDetails
     * @description Captures all artifact details for the node.
     */
    StepNodeDetails: {
      /** Execution Id */
      execution_id: string;
      /** Name */
      name: string;
      status: components["schemas"]["ExecutionStatus"];
      /** Entrypoint Name */
      entrypoint_name: string;
      /** Parameters */
      parameters: {
        [key: string]: unknown;
      };
      /** Configuration */
      configuration: {
        [key: string]: unknown;
      };
      /** Inputs */
      inputs: {
        [key: string]: unknown;
      };
      /** Outputs */
      outputs: {
        [key: string]: unknown;
      };
      /** Metadata */
      metadata: [string, string, string][];
    };
    /**
     * StepRunRequestModel
     * @description Request model for step runs.
     */
    StepRunRequestModel: {
      /**
       * The id of the user that created this resource.
       * Format: uuid
       */
      user: string;
      /**
       * The workspace to which this resource belongs.
       * Format: uuid
       */
      workspace: string;
      /** The name of the pipeline run step. */
      name: string;
      /** The configuration of the step. */
      config: components["schemas"]["StepConfiguration"];
      /** The spec of the step. */
      spec: components["schemas"]["StepSpec"];
      /**
       * The ID of the pipeline run that this step run belongs to.
       * Format: uuid
       */
      pipeline_run_id: string;
      /**
       * The ID of the original step run if this step was cached.
       * Format: uuid
       */
      original_step_run_id?: string;
      /** The status of the step. */
      status: components["schemas"]["ExecutionStatus"];
      /** The IDs of the parent steps of this step run. */
      parent_step_ids?: string[];
      /** The cache key of the step run. */
      cache_key?: string;
      /** The docstring of the step function or class. */
      docstring?: string;
      /** The source code of the step function or class. */
      source_code?: string;
      /**
       * The start time of the step run.
       * Format: date-time
       */
      start_time?: string;
      /**
       * The end time of the step run.
       * Format: date-time
       */
      end_time?: string;
      /**
       * The IDs of the input artifacts of the step run.
       * @default {}
       */
      inputs?: {
        [key: string]: unknown;
      };
      /**
       * The IDs of the output artifacts of the step run.
       * @default {}
       */
      outputs?: {
        [key: string]: unknown;
      };
      /** Logs associated with this step run. */
      logs?: components["schemas"]["LogsRequestModel"];
    };
    /**
     * StepRunResponseModel
     * @description Response model for step runs.
     */
    StepRunResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The user that created this resource. */
      user?: components["schemas"]["UserResponseModel"] | null;
      /** The workspace of this resource. */
      workspace: components["schemas"]["WorkspaceResponseModel"];
      /** The name of the pipeline run step. */
      name: string;
      /** The configuration of the step. */
      config: components["schemas"]["StepConfiguration"];
      /** The spec of the step. */
      spec: components["schemas"]["StepSpec"];
      /**
       * The ID of the pipeline run that this step run belongs to.
       * Format: uuid
       */
      pipeline_run_id: string;
      /**
       * The ID of the original step run if this step was cached.
       * Format: uuid
       */
      original_step_run_id?: string;
      /** The status of the step. */
      status: components["schemas"]["ExecutionStatus"];
      /** The IDs of the parent steps of this step run. */
      parent_step_ids?: string[];
      /** The cache key of the step run. */
      cache_key?: string;
      /** The docstring of the step function or class. */
      docstring?: string;
      /** The source code of the step function or class. */
      source_code?: string;
      /**
       * The start time of the step run.
       * Format: date-time
       */
      start_time?: string;
      /**
       * The end time of the step run.
       * Format: date-time
       */
      end_time?: string;
      /**
       * The input artifacts of the step run.
       * @default {}
       */
      inputs?: {
        [key: string]: unknown;
      };
      /**
       * The output artifacts of the step run.
       * @default {}
       */
      outputs?: {
        [key: string]: unknown;
      };
      /**
       * Metadata associated with this step run.
       * @default {}
       */
      metadata?: {
        [key: string]: unknown;
      };
      /** Logs associated with this step run. */
      logs?: components["schemas"]["LogsResponseModel"];
    };
    /**
     * StepRunUpdateModel
     * @description Update model for step runs.
     */
    StepRunUpdateModel: {
      /**
       * The IDs of the output artifacts of the step run.
       * @default {}
       */
      outputs?: {
        [key: string]: unknown;
      };
      /** The status of the step. */
      status?: components["schemas"]["ExecutionStatus"];
      /**
       * The end time of the step run.
       * Format: date-time
       */
      end_time?: string;
    };
    /**
     * StepSpec
     * @description Specification of a pipeline.
     */
    StepSpec: {
      source: components["schemas"]["Source"];
      /** Upstream Steps */
      upstream_steps: string[];
      /**
       * Inputs
       * @default {}
       */
      inputs?: {
        [key: string]: unknown;
      };
      /**
       * Pipeline Parameter Name
       * @default
       */
      pipeline_parameter_name?: string;
    };
    /**
     * TeamRequestModel
     * @description Request model for teams.
     */
    TeamRequestModel: {
      /** The unique name of the team. */
      name: string;
      /** The list of users within this team. */
      users?: string[];
    };
    /**
     * TeamResponseModel
     * @description Response model for teams.
     */
    TeamResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The unique name of the team. */
      name: string;
      /** The list of users within this team. */
      users: components["schemas"]["UserResponseModel"][];
    };
    /**
     * TeamRoleAssignmentRequestModel
     * @description Request model for role assignments using UUIDs for all entities.
     */
    TeamRoleAssignmentRequestModel: {
      /**
       * The workspace that the role is limited to.
       * Format: uuid
       */
      workspace?: string;
      /**
       * The user that the role is assigned to.
       * Format: uuid
       */
      team: string;
      /**
       * The role.
       * Format: uuid
       */
      role: string;
    };
    /**
     * TeamRoleAssignmentResponseModel
     * @description Response model for role assignments with all entities hydrated.
     */
    TeamRoleAssignmentResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The workspace scope of this role assignment. */
      workspace?: components["schemas"]["WorkspaceResponseModel"];
      /** The team the role is assigned to. */
      team?: components["schemas"]["TeamResponseModel"];
      /** The assigned role. */
      role?: components["schemas"]["RoleResponseModel"];
    };
    /**
     * TeamUpdateModel
     * @description Update model for teams.
     */
    TeamUpdateModel: {
      /** The unique name of the team. */
      name?: string;
      /** The list of users within this team. */
      users?: string[];
    };
    /**
     * UserResponseModel
     * @description Response model for users.
     *
     * This returns the activation_token (which is required for the
     * user-invitation-flow of the frontend. This also optionally includes the
     * team the user is a part of. The email is returned optionally as well
     * for use by the analytics on the client-side.
     */
    UserResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The unique username for the account. */
      name: string;
      /**
       * The full name for the account owner.
       * @default
       */
      full_name?: string;
      /**
       * Whether the user agreed to share their email.
       * @description `null` if not answered, `true` if agreed, `false` if skipped.
       */
      email_opted_in?: boolean;
      /** JWT Token for the connected Hub account. */
      hub_token?: string;
      /**
       * Active account.
       * @default false
       */
      active?: boolean;
      /** Activation Token */
      activation_token?: string;
      /** The list of teams for this user. */
      teams?: components["schemas"]["TeamResponseModel"][];
      /** The list of roles for this user. */
      roles?: components["schemas"]["RoleResponseModel"][];
      /**
       * The email address associated with the account.
       * @default
       */
      email?: string;
      /**
       * The external user ID associated with the account.
       * Format: uuid
       */
      external_user_id?: string;
    };
    /**
     * UserRoleAssignmentRequestModel
     * @description Request model for role assignments using UUIDs for all entities.
     */
    UserRoleAssignmentRequestModel: {
      /**
       * The workspace that the role is limited to.
       * Format: uuid
       */
      workspace?: string;
      /**
       * The user that the role is assigned to.
       * Format: uuid
       */
      user: string;
      /**
       * The role.
       * Format: uuid
       */
      role: string;
    };
    /**
     * UserRoleAssignmentResponseModel
     * @description Response model for role assignments with all entities hydrated.
     */
    UserRoleAssignmentResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The workspace scope of this role assignment. */
      workspace?: components["schemas"]["WorkspaceResponseModel"];
      /** The user the role is assigned to. */
      user?: components["schemas"]["UserResponseModel"];
      /** The assigned role. */
      role?: components["schemas"]["RoleResponseModel"];
    };
    /**
     * UserUpdateModel
     * @description Update model for users.
     */
    UserUpdateModel: {
      /** The unique username for the account. */
      name?: string;
      /**
       * The full name for the account owner.
       * @default
       */
      full_name?: string;
      /**
       * Whether the user agreed to share their email.
       * @description `null` if not answered, `true` if agreed, `false` if skipped.
       */
      email_opted_in?: boolean;
      /** JWT Token for the connected Hub account. */
      hub_token?: string;
      /**
       * Active account.
       * @default false
       */
      active?: boolean;
      /** The email address associated with the account. */
      email?: string;
      /** A password for the user. */
      password?: string;
      /** Activation Token */
      activation_token?: string;
      /**
       * The external user ID associated with the account.
       * Format: uuid
       */
      external_user_id?: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * VisualizationModel
     * @description Model for unloaded visualization.
     */
    VisualizationModel: {
      type: components["schemas"]["VisualizationType"];
      /** Uri */
      uri: string;
    };
    /**
     * VisualizationType
     * @description All currently available visualization types.
     * @enum {string}
     */
    VisualizationType: "csv" | "html" | "image" | "markdown";
    /**
     * WorkspaceRequestModel
     * @description Request model for workspaces.
     */
    WorkspaceRequestModel: {
      /** The unique name of the workspace. */
      name: string;
      /**
       * The description of the workspace.
       * @default
       */
      description?: string;
    };
    /**
     * WorkspaceResponseModel
     * @description Response model for workspaces.
     */
    WorkspaceResponseModel: {
      /**
       * The unique resource id.
       * Format: uuid
       */
      id: string;
      /**
       * Time when this resource was created.
       * Format: date-time
       */
      created: string;
      /**
       * Time when this resource was last updated.
       * Format: date-time
       */
      updated: string;
      /** The unique name of the workspace. */
      name: string;
      /**
       * The description of the workspace.
       * @default
       */
      description?: string;
    };
    /**
     * WorkspaceUpdateModel
     * @description Update model for workspaces.
     */
    WorkspaceUpdateModel: {
      /** The unique name of the workspace. */
      name?: string;
      /**
       * The description of the workspace.
       * @default
       */
      description?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Health
   * @description Get health status of the server.
   *
   * Returns:
   *     String representing the health status of the server.
   */
  health_health_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Login
   * @description Authorize a user through the external authenticator service.
   *
   * Args:
   *     request: The request object.
   *     response: The response object.
   *     redirect_url: The URL to redirect to after successful login.
   *
   * Returns:
   *     An authentication response with an access token or an external
   *     authorization URL.
   */
  login_api_v1_login_post: {
    parameters: {
      query?: {
        redirect_url?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuthenticationResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Logout
   * @description Logs out the user.
   *
   * Args:
   *     response: The response object.
   */
  logout_api_v1_logout_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuthenticationResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Pipelines
   * @description Gets a list of pipelines.
   *
   * Args:
   *     pipeline_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     List of pipeline objects.
   */
  list_pipelines_api_v1_pipelines_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        version?: string;
        version_hash?: string;
        docstring?: string;
        workspace_id?: string;
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Pipeline
   * @description Gets a specific pipeline using its unique id.
   *
   * Args:
   *     pipeline_id: ID of the pipeline to get.
   *
   * Returns:
   *     A specific pipeline object.
   */
  get_pipeline_api_v1_pipelines__pipeline_id__get: {
    parameters: {
      path: {
        pipeline_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Pipeline
   * @description Updates the attribute on a specific pipeline using its unique id.
   *
   * Args:
   *     pipeline_id: ID of the pipeline to get.
   *     pipeline_update: the model containing the attributes to update.
   *
   * Returns:
   *     The updated pipeline object.
   */
  update_pipeline_api_v1_pipelines__pipeline_id__put: {
    parameters: {
      path: {
        pipeline_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelineUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Pipeline
   * @description Deletes a specific pipeline.
   *
   * Args:
   *     pipeline_id: ID of the pipeline to delete.
   */
  delete_pipeline_api_v1_pipelines__pipeline_id__delete: {
    parameters: {
      path: {
        pipeline_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Pipeline Runs
   * @description Get pipeline runs according to query filters.
   *
   * Args:
   *     pipeline_run_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     The pipeline runs according to query filters.
   */
  list_pipeline_runs_api_v1_pipelines__pipeline_id__runs_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        orchestrator_run_id?: string;
        workspace_id?: string;
        user_id?: string;
        stack_id?: string;
        schedule_id?: string;
        build_id?: string;
        deployment_id?: string;
        code_repository_id?: string;
        status?: string;
        start_time?: string;
        end_time?: string;
        num_steps?: number;
        unlisted?: boolean;
      };
      path: {
        pipeline_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineRunResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Pipeline Spec
   * @description Gets the spec of a specific pipeline using its unique id.
   *
   * Args:
   *     pipeline_id: ID of the pipeline to get.
   *
   * Returns:
   *     The spec of the pipeline.
   */
  get_pipeline_spec_api_v1_pipelines__pipeline_id__pipeline_spec_get: {
    parameters: {
      path: {
        pipeline_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineSpec"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspaces
   * @description Lists all workspaces in the organization.
   *
   * Args:
   *     workspace_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     A list of workspaces.
   */
  list_workspaces_api_v1_workspaces_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        name?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_WorkspaceResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Workspace
   * @description Creates a workspace based on the requestBody.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace: Workspace to create.
   *
   * Returns:
   *     The created workspace.
   */
  create_workspace_api_v1_workspaces_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Workspace
   * @description Get a workspace for given name.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *
   * Returns:
   *     The requested workspace.
   */
  get_workspace_api_v1_workspaces__workspace_name_or_id__get: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Workspace
   * @description Get a workspace for given name.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace to update.
   *     workspace_update: the workspace to use to update
   *
   * Returns:
   *     The updated workspace.
   */
  update_workspace_api_v1_workspaces__workspace_name_or_id__put: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Workspace
   * @description Deletes a workspace.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   */
  delete_workspace_api_v1_workspaces__workspace_name_or_id__delete: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List User Role Assignments For Workspace
   * @description Returns a list of all roles that are assigned to a team.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     user_role_assignment_filter_model: Filter model used for pagination,
   *         sorting, filtering
   *
   * Returns:
   *     A list of all roles that are assigned to a team.
   */
  list_user_role_assignments_for_workspace_api_v1_workspaces__workspace_name_or_id__role_assignments_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        workspace_id?: string;
        user_id?: string;
        role_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_UserRoleAssignmentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Team Role Assignments For Workspace
   * @description Returns a list of all roles that are assigned to a team.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     team_role_assignment_filter_model: Filter model used for pagination,
   *         sorting, filtering
   *
   * Returns:
   *     A list of all roles that are assigned to a team.
   */
  list_team_role_assignments_for_workspace_api_v1_workspaces__workspace_name_or_id__team_role_assignments_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        workspace_id?: string;
        team_id?: string;
        role_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_TeamRoleAssignmentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspace Stacks
   * @description Get stacks that are part of a specific workspace for the user.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     stack_filter_model: Filter model used for pagination, sorting, filtering
   *     auth_context: Authentication Context
   *
   * Returns:
   *     All stacks part of the specified workspace.
   */
  list_workspace_stacks_api_v1_workspaces__workspace_name_or_id__stacks_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        scope_user?: string;
        is_shared?: boolean | string;
        name?: string;
        description?: string;
        workspace_id?: string;
        user_id?: string;
        component_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_StackResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Stack
   * @description Creates a stack for a particular workspace.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     stack: Stack to register.
   *     auth_context: The authentication context.
   *
   * Returns:
   *     The created stack.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the stack
   *         does not match the current workspace or authenticated user.
   */
  create_stack_api_v1_workspaces__workspace_name_or_id__stacks_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StackRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StackResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspace Stack Components
   * @description List stack components that are part of a specific workspace.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     component_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *     auth_context: Authentication Context
   *
   * Returns:
   *     All stack components part of the specified workspace.
   */
  list_workspace_stack_components_api_v1_workspaces__workspace_name_or_id__components_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        scope_user?: string;
        scope_type?: string;
        is_shared?: boolean | string;
        name?: string;
        flavor?: string;
        type?: string;
        workspace_id?: string;
        user_id?: string;
        connector_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ComponentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Stack Component
   * @description Creates a stack component.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     component: Stack component to register.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created stack component.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the stack
   *         component does not match the current workspace or authenticated
   *         user.
   */
  create_stack_component_api_v1_workspaces__workspace_name_or_id__components_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComponentRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ComponentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspace Pipelines
   * @description Gets pipelines defined for a specific workspace.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     pipeline_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     All pipelines within the workspace.
   */
  list_workspace_pipelines_api_v1_workspaces__workspace_name_or_id__pipelines_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        version?: string;
        version_hash?: string;
        docstring?: string;
        workspace_id?: string;
        user_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Pipeline
   * @description Creates a pipeline.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     pipeline: Pipeline to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created pipeline.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the pipeline
   *         does not match the current workspace or authenticated user.
   */
  create_pipeline_api_v1_workspaces__workspace_name_or_id__pipelines_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelineRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspace Builds
   * @description Gets builds defined for a specific workspace.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     build_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     All builds within the workspace.
   */
  list_workspace_builds_api_v1_workspaces__workspace_name_or_id__pipeline_builds_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        workspace_id?: string;
        user_id?: string;
        pipeline_id?: string;
        stack_id?: string;
        is_local?: boolean;
        contains_code?: boolean;
        zenml_version?: string;
        python_version?: string;
        checksum?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineBuildResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Build
   * @description Creates a build.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     build: Build to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created build.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the build
   *         does not match the current workspace or authenticated user.
   */
  create_build_api_v1_workspaces__workspace_name_or_id__pipeline_builds_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelineBuildRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineBuildResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspace Deployments
   * @description Gets deployments defined for a specific workspace.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     deployment_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     All deployments within the workspace.
   */
  list_workspace_deployments_api_v1_workspaces__workspace_name_or_id__pipeline_deployments_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        workspace_id?: string;
        user_id?: string;
        pipeline_id?: string;
        stack_id?: string;
        build_id?: string;
        schedule_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineDeploymentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Deployment
   * @description Creates a deployment.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     deployment: Deployment to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created deployment.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the
   *         deployment does not match the current workspace or authenticated
   *         user.
   */
  create_deployment_api_v1_workspaces__workspace_name_or_id__pipeline_deployments_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelineDeploymentRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineDeploymentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Runs
   * @description Get pipeline runs according to query filters.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     runs_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   *
   * Returns:
   *     The pipeline runs according to query filters.
   */
  list_runs_api_v1_workspaces__workspace_name_or_id__runs_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        orchestrator_run_id?: string;
        pipeline_id?: string;
        workspace_id?: string;
        user_id?: string;
        stack_id?: string;
        schedule_id?: string;
        build_id?: string;
        deployment_id?: string;
        code_repository_id?: string;
        status?: string;
        start_time?: string;
        end_time?: string;
        num_steps?: number;
        unlisted?: boolean;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineRunResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Pipeline Run
   * @description Creates a pipeline run.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     pipeline_run: Pipeline run to create.
   *     auth_context: Authentication context.
   *     get_if_exists: If a similar pipeline run already exists, return it
   *         instead of raising an error.
   *
   * Returns:
   *     The created pipeline run.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the
   *         pipeline run does not match the current workspace or authenticated
   *         user.
   */
  create_pipeline_run_api_v1_workspaces__workspace_name_or_id__runs_post: {
    parameters: {
      query?: {
        get_if_exists?: boolean;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelineRunRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineRunResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Schedule
   * @description Creates a schedule.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     schedule: Schedule to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created schedule.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the
   *         schedule does not match the current workspace or authenticated user.
   */
  create_schedule_api_v1_workspaces__workspace_name_or_id__schedules_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Or Create Pipeline Run
   * @description Get or create a pipeline run.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     pipeline_run: Pipeline run to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The pipeline run and a boolean indicating whether the run was created
   *     or not.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the
   *         pipeline run does not match the current workspace or authenticated
   *         user.
   */
  get_or_create_pipeline_run_api_v1_workspaces__workspace_name_or_id__runs_get_or_create_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelineRunRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": [components["schemas"]["PipelineRunResponseModel"], boolean];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Run Metadata
   * @description Creates run metadata.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     run_metadata: The run metadata to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created run metadata.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the run
   *         metadata does not match the current workspace or authenticated user.
   */
  create_run_metadata_api_v1_workspaces__workspace_name_or_id__run_metadata_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunMetadataRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RunMetadataResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Secret
   * @description Creates a secret.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     secret: Secret to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created secret.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the
   *         secret does not match the current workspace or authenticated user.
   */
  create_secret_api_v1_workspaces__workspace_name_or_id__secrets_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SecretRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecretResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspace Code Repositories
   * @description Gets code repositories defined for a specific workspace.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     All code repositories within the workspace.
   */
  list_workspace_code_repositories_api_v1_workspaces__workspace_name_or_id__code_repositories_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        workspace_id?: string;
        user_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_CodeRepositoryResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Code Repository
   * @description Creates a code repository.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     code_repository: Code repository to create.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created code repository.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the
   *         code repository does not match the current workspace or
   *         authenticated user.
   */
  create_code_repository_api_v1_workspaces__workspace_name_or_id__code_repositories_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CodeRepositoryRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CodeRepositoryResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Workspace Statistics
   * @description Gets statistics of a workspace.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace to get statistics for.
   *
   * Returns:
   *     All pipelines within the workspace.
   */
  get_workspace_statistics_api_v1_workspaces__workspace_name_or_id__statistics_get: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Workspace Service Connectors
   * @description List service connectors that are part of a specific workspace.
   *
   * # noqa: DAR401
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     connector_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *     auth_context: Authentication Context
   *
   * Returns:
   *     All service connectors part of the specified workspace.
   */
  list_workspace_service_connectors_api_v1_workspaces__workspace_name_or_id__service_connectors_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        scope_user?: string;
        scope_type?: string;
        is_shared?: boolean | string;
        name?: string;
        connector_type?: string;
        workspace_id?: string;
        user_id?: string;
        auth_method?: string;
        resource_type?: string;
        resource_id?: string;
        labels_str?: string;
        secret_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ServiceConnectorResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Service Connector
   * @description Creates a service connector.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     connector: Service connector to register.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created service connector.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the service
   *         connector does not match the current workspace or authenticated
   *         user.
   */
  create_service_connector_api_v1_workspaces__workspace_name_or_id__service_connectors_post: {
    parameters: {
      path: {
        workspace_name_or_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceConnectorRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Service Connector Resources
   * @description List resources that can be accessed by service connectors.
   *
   * Args:
   *     workspace_name_or_id: Name or ID of the workspace.
   *     connector_type: the service connector type identifier to filter by.
   *     resource_type: the resource type identifier to filter by.
   *     resource_id: the resource identifier to filter by.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The matching list of resources that available service
   *     connectors have access to.
   */
  list_service_connector_resources_api_v1_workspaces__workspace_name_or_id__service_connectors_resources_get: {
    parameters: {
      query?: {
        connector_type?: string;
        resource_type?: string;
        resource_id?: string;
      };
      path: {
        workspace_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorResourcesModel"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Flavors
   * @description Returns all flavors.
   *
   * Args:
   *     flavor_filter_model: Filter model used for pagination, sorting,
   *                          filtering
   *
   *
   * Returns:
   *     All flavors.
   */
  list_flavors_api_v1_flavors_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        type?: string;
        integration?: string;
        workspace_id?: string;
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_FlavorResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Flavor
   * @description Creates a stack component flavor.
   *
   * Args:
   *     flavor: Stack component flavor to register.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The created stack component flavor.
   *
   * Raises:
   *     IllegalOperationError: If the workspace or user specified in the stack
   *         component flavor does not match the current workspace or authenticated
   *         user.
   */
  create_flavor_api_v1_flavors_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlavorRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlavorResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Flavor
   * @description Returns the requested flavor.
   *
   * Args:
   *     flavor_id: ID of the flavor.
   *
   * Returns:
   *     The requested stack.
   */
  get_flavor_api_v1_flavors__flavor_id__get: {
    parameters: {
      path: {
        flavor_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlavorResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Flavor
   * @description Deletes a flavor.
   *
   * Args:
   *     flavor_id: ID of the flavor.
   */
  delete_flavor_api_v1_flavors__flavor_id__delete: {
    parameters: {
      path: {
        flavor_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Flavor
   * @description Updates a flavor.
   *
   * # noqa: DAR401
   *
   * Args:
   *     flavor_id: ID of the team to update.
   *     flavor_update: Team update.
   *
   * Returns:
   *     The updated flavor.
   */
  update_flavor_api_v1_flavors__team_id__put: {
    parameters: {
      query: {
        flavor_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlavorUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlavorResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Roles
   * @description Returns a list of all roles.
   *
   * Args:
   *     role_filter_model: Filter model used for pagination, sorting, filtering
   *
   *
   * Returns:
   *     List of all roles.
   */
  list_roles_api_v1_roles_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        name?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_RoleResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Role
   * @description Creates a role.
   *
   * # noqa: DAR401
   *
   * Args:
   *     role: Role to create.
   *
   * Returns:
   *     The created role.
   */
  create_role_api_v1_roles_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoleResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Role
   * @description Returns a specific role.
   *
   * Args:
   *     role_name_or_id: Name or ID of the role.
   *
   * Returns:
   *     A specific role.
   */
  get_role_api_v1_roles__role_name_or_id__get: {
    parameters: {
      path: {
        role_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoleResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Role
   * @description Deletes a specific role.
   *
   * Args:
   *     role_name_or_id: Name or ID of the role.
   */
  delete_role_api_v1_roles__role_name_or_id__delete: {
    parameters: {
      path: {
        role_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Role
   * @description Updates a role.
   *
   * # noqa: DAR401
   *
   * Args:
   *     role_id: The ID of the role.
   *     role_update: Role update.
   *
   * Returns:
   *     The created role.
   */
  update_role_api_v1_roles__role_id__put: {
    parameters: {
      path: {
        role_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoleResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List User Role Assignments
   * @description Returns a list of all role assignments.
   *
   * Args:
   *     user_role_assignment_filter_model: filter models for user role assignments
   *
   * Returns:
   *     List of all role assignments.
   */
  list_user_role_assignments_api_v1_role_assignments_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        workspace_id?: string;
        user_id?: string;
        role_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_UserRoleAssignmentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Role Assignment
   * @description Creates a role assignment.
   *
   * # noqa: DAR401
   *
   * Args:
   *     role_assignment: Role assignment to create.
   *
   * Returns:
   *     The created role assignment.
   */
  create_role_assignment_api_v1_role_assignments_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRoleAssignmentRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRoleAssignmentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Role Assignment
   * @description Returns a specific role assignment.
   *
   * Args:
   *     role_assignment_id: Name or ID of the role assignment.
   *
   * Returns:
   *     A specific role assignment.
   */
  get_role_assignment_api_v1_role_assignments__role_assignment_id__get: {
    parameters: {
      path: {
        role_assignment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRoleAssignmentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Role Assignment
   * @description Deletes a specific role.
   *
   * Args:
   *     role_assignment_id: The ID of the role assignment.
   */
  delete_role_assignment_api_v1_role_assignments__role_assignment_id__delete: {
    parameters: {
      path: {
        role_assignment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Team Role Assignments
   * @description Returns a list of all role assignments.
   *
   * Args:
   *     team_role_assignment_filter_model: filter models for team role assignments
   *
   *
   * Returns:
   *     List of all role assignments.
   */
  list_team_role_assignments_api_v1_team_role_assignments_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        workspace_id?: string;
        team_id?: string;
        role_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_TeamRoleAssignmentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Team Role Assignment
   * @description Creates a role assignment.
   *
   * # noqa: DAR401
   *
   * Args:
   *     role_assignment: Role assignment to create.
   *
   * Returns:
   *     The created role assignment.
   */
  create_team_role_assignment_api_v1_team_role_assignments_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamRoleAssignmentRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamRoleAssignmentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Team Role Assignment
   * @description Returns a specific role assignment.
   *
   * Args:
   *     role_assignment_id: Name or ID of the role assignment.
   *
   * Returns:
   *     A specific role assignment.
   */
  get_team_role_assignment_api_v1_team_role_assignments__role_assignment_id__get: {
    parameters: {
      path: {
        role_assignment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamRoleAssignmentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Team Role Assignment
   * @description Deletes a specific role.
   *
   * Args:
   *     role_assignment_id: The ID of the role assignment.
   */
  delete_team_role_assignment_api_v1_team_role_assignments__role_assignment_id__delete: {
    parameters: {
      path: {
        role_assignment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Runs
   * @description Get pipeline runs according to query filters.
   *
   * Args:
   *     runs_filter_model: Filter model used for pagination, sorting, filtering
   *
   * Returns:
   *     The pipeline runs according to query filters.
   */
  list_runs_api_v1_runs_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        orchestrator_run_id?: string;
        pipeline_id?: string;
        workspace_id?: string;
        user_id?: string;
        stack_id?: string;
        schedule_id?: string;
        build_id?: string;
        deployment_id?: string;
        code_repository_id?: string;
        status?: string;
        start_time?: string;
        end_time?: string;
        num_steps?: number;
        unlisted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineRunResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Run
   * @description Get a specific pipeline run using its ID.
   *
   * Args:
   *     run_id: ID of the pipeline run to get.
   *
   * Returns:
   *     The pipeline run.
   */
  get_run_api_v1_runs__run_id__get: {
    parameters: {
      path: {
        run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineRunResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Run
   * @description Updates a run.
   *
   * Args:
   *     run_id: ID of the run.
   *     run_model: Run model to use for the update.
   *
   * Returns:
   *     The updated run model.
   */
  update_run_api_v1_runs__run_id__put: {
    parameters: {
      path: {
        run_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelineRunUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineRunResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Run
   * @description Deletes a run.
   *
   * Args:
   *     run_id: ID of the run.
   */
  delete_run_api_v1_runs__run_id__delete: {
    parameters: {
      path: {
        run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Run Dag
   * @description Get the DAG for a given pipeline run.
   *
   * Args:
   *     run_id: ID of the pipeline run to use to get the DAG.
   *
   * Returns:
   *     The DAG for a given pipeline run.
   */
  get_run_dag_api_v1_runs__run_id__graph_get: {
    parameters: {
      path: {
        run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LineageGraph"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Run Steps
   * @description Get all steps for a given pipeline run.
   *
   * Args:
   *     step_run_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     The steps for a given pipeline run.
   */
  get_run_steps_api_v1_runs__run_id__steps_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        entrypoint_name?: string;
        code_hash?: string;
        cache_key?: string;
        status?: string;
        start_time?: string;
        end_time?: string;
        pipeline_run_id?: string;
        original_step_run_id?: string;
        user_id?: string;
        workspace_id?: string;
        num_outputs?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_StepRunResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Pipeline Configuration
   * @description Get the pipeline configuration of a specific pipeline run using its ID.
   *
   * Args:
   *     run_id: ID of the pipeline run to get.
   *
   * Returns:
   *     The pipeline configuration of the pipeline run.
   */
  get_pipeline_configuration_api_v1_runs__run_id__pipeline_configuration_get: {
    parameters: {
      path: {
        run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Run Status
   * @description Get the status of a specific pipeline run.
   *
   * Args:
   *     run_id: ID of the pipeline run for which to get the status.
   *
   * Returns:
   *     The status of the pipeline run.
   */
  get_run_status_api_v1_runs__run_id__status_get: {
    parameters: {
      path: {
        run_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExecutionStatus"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Run Metadata
   * @description Get run metadata according to query filters.
   *
   * Args:
   *     run_metadata_filter_model: Filter model used for pagination, sorting,
   *         filtering.
   *
   * Returns:
   *     The pipeline runs according to query filters.
   */
  list_run_metadata_api_v1_run_metadata_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        pipeline_run_id?: string;
        step_run_id?: string;
        artifact_id?: string;
        stack_component_id?: string;
        key?: string;
        type?: string | components["schemas"]["MetadataTypeEnum"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_RunMetadataResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Schedules
   * @description Gets a list of schedules.
   *
   * Args:
   *     schedule_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     List of schedule objects.
   */
  list_schedules_api_v1_schedules_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        scope_user?: string;
        workspace_id?: string;
        user_id?: string;
        pipeline_id?: string;
        orchestrator_id?: string;
        active?: boolean;
        cron_expression?: string;
        start_time?: string;
        end_time?: string;
        interval_second?: number;
        catchup?: boolean;
        name?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ScheduleResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Schedule
   * @description Gets a specific schedule using its unique id.
   *
   * Args:
   *     schedule_id: ID of the schedule to get.
   *
   * Returns:
   *     A specific schedule object.
   */
  get_schedule_api_v1_schedules__schedule_id__get: {
    parameters: {
      path: {
        schedule_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Schedule
   * @description Updates the attribute on a specific schedule using its unique id.
   *
   * Args:
   *     schedule_id: ID of the schedule to get.
   *     schedule_update: the model containing the attributes to update.
   *
   * Returns:
   *     The updated schedule object.
   */
  update_schedule_api_v1_schedules__schedule_id__put: {
    parameters: {
      path: {
        schedule_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Schedule
   * @description Deletes a specific schedule using its unique id.
   *
   * Args:
   *     schedule_id: ID of the schedule to delete.
   */
  delete_schedule_api_v1_schedules__schedule_id__delete: {
    parameters: {
      path: {
        schedule_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Secrets
   * @description Gets a list of secrets.
   *
   * Args:
   *     secret_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *     auth_context: Authentication context.
   *
   * Returns:
   *     List of secret objects.
   */
  list_secrets_api_v1_secrets_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        scope?: components["schemas"]["SecretScope"] | string;
        workspace_id?: string;
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SecretResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Secret
   * @description Gets a specific secret using its unique id.
   *
   * Args:
   *     secret_id: ID of the secret to get.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     A specific secret object.
   */
  get_secret_api_v1_secrets__secret_id__get: {
    parameters: {
      path: {
        secret_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecretResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Secret
   * @description Updates the attribute on a specific secret using its unique id.
   *
   * Args:
   *     secret_id: ID of the secret to get.
   *     secret_update: the model containing the attributes to update.
   *     patch_values: Whether to patch the secret values or replace them.
   *
   * Returns:
   *     The updated secret object.
   */
  update_secret_api_v1_secrets__secret_id__put: {
    parameters: {
      query?: {
        patch_values?: boolean;
      };
      path: {
        secret_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SecretUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecretResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Secret
   * @description Deletes a specific secret using its unique id.
   *
   * Args:
   *     secret_id: ID of the secret to delete.
   */
  delete_secret_api_v1_secrets__secret_id__delete: {
    parameters: {
      path: {
        secret_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Version
   * @description Get version of the server.
   *
   * Returns:
   *     String representing the version of the server.
   */
  version_api_v1_version_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Server Info
   * @description Get information about the server.
   *
   * Returns:
   *     Information about the server.
   */
  server_info_api_v1_info_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServerModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Service Connectors
   * @description Get a list of all service connectors for a specific type.
   *
   * Args:
   *     connector_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *     expand_secrets: Whether to expand secrets or not.
   *     auth_context: Authentication Context
   *
   * Returns:
   *     Page with list of service connectors for a specific type.
   */
  list_service_connectors_api_v1_service_connectors_get: {
    parameters: {
      query?: {
        expand_secrets?: boolean;
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        scope_user?: string;
        scope_type?: string;
        is_shared?: boolean | string;
        name?: string;
        connector_type?: string;
        workspace_id?: string;
        user_id?: string;
        auth_method?: string;
        resource_type?: string;
        resource_id?: string;
        labels_str?: string;
        secret_id?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ServiceConnectorResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Service Connector
   * @description Returns the requested service connector.
   *
   * Args:
   *     connector_id: ID of the service connector.
   *     expand_secrets: Whether to expand secrets or not.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The requested service connector.
   *
   * Raises:
   *     KeyError: If the service connector does not exist or is not accessible.
   */
  get_service_connector_api_v1_service_connectors__connector_id__get: {
    parameters: {
      query?: {
        expand_secrets?: boolean;
      };
      path: {
        connector_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Service Connector
   * @description Updates a service connector.
   *
   * Args:
   *     connector_id: ID of the service connector.
   *     connector_update: Service connector to use to update.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     Updated service connector.
   *
   * Raises:
   *     KeyError: If the service connector does not exist or is not accessible.
   */
  update_service_connector_api_v1_service_connectors__connector_id__put: {
    parameters: {
      path: {
        connector_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceConnectorUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Service Connector
   * @description Deletes a service connector.
   *
   * Args:
   *     connector_id: ID of the service connector.
   *     auth_context: Authentication context.
   *
   * Raises:
   *     KeyError: If the service connector does not exist or is not accessible.
   */
  delete_service_connector_api_v1_service_connectors__connector_id__delete: {
    parameters: {
      path: {
        connector_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Validate And Verify Service Connector Config
   * @description Verifies if a service connector configuration has access to resources.
   *
   * This requires the service connector implementation to be installed
   * on the ZenML server, otherwise a 501 Not Implemented error will be
   * returned.
   *
   * Args:
   *     connector: The service connector configuration to verify.
   *     list_resources: If True, the list of all resources accessible
   *         through the service connector is returned.
   *
   * Returns:
   *     The list of resources that the service connector configuration has
   *     access to.
   */
  validate_and_verify_service_connector_config_api_v1_service_connectors_verify_post: {
    parameters: {
      query?: {
        list_resources?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceConnectorRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorResourcesModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Validate And Verify Service Connector
   * @description Verifies if a service connector instance has access to one or more resources.
   *
   * This requires the service connector implementation to be installed
   * on the ZenML server, otherwise a 501 Not Implemented error will be
   * returned.
   *
   * Args:
   *     connector_id: The ID of the service connector to verify.
   *     resource_type: The type of resource to verify access to.
   *     resource_id: The ID of the resource to verify access to.
   *     list_resources: If True, the list of all resources accessible
   *         through the service connector and matching the supplied resource
   *         type and ID are returned.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     The list of resources that the service connector has access to, scoped
   *     to the supplied resource type and ID, if provided.
   *
   * Raises:
   *     KeyError: If the service connector does not exist or is not accessible.
   */
  validate_and_verify_service_connector_api_v1_service_connectors__connector_id__verify_put: {
    parameters: {
      query?: {
        resource_type?: string;
        resource_id?: string;
        list_resources?: boolean;
      };
      path: {
        connector_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorResourcesModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Service Connector Client
   * @description Get a service connector client for a service connector and given resource.
   *
   * This requires the service connector implementation to be installed
   * on the ZenML server, otherwise a 501 Not Implemented error will be
   * returned.
   *
   * Args:
   *     connector_id: ID of the service connector.
   *     resource_type: Type of the resource to list.
   *     resource_id: ID of the resource to list.
   *     auth_context: Authentication context.
   *
   * Returns:
   *     A service connector client that can be used to access the given
   *     resource.
   *
   * Raises:
   *     KeyError: If the service connector does not exist or is not accessible.
   */
  get_service_connector_client_api_v1_service_connectors__connector_id__client_get: {
    parameters: {
      query?: {
        resource_type?: string;
        resource_id?: string;
      };
      path: {
        connector_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Service Connector Types
   * @description Get a list of service connector types.
   *
   * Args:
   *     connector_type: Filter by connector type.
   *     resource_type: Filter by resource type.
   *     auth_method: Filter by auth method.
   *
   * Returns:
   *     List of service connector types.
   */
  list_service_connector_types_api_v1_service_connector_types_get: {
    parameters: {
      query?: {
        connector_type?: string;
        resource_type?: string;
        auth_method?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorTypeModel"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Service Connector Type
   * @description Returns the requested service connector type.
   *
   * Args:
   *     connector_type: the service connector type identifier.
   *
   * Returns:
   *     The requested service connector type.
   */
  get_service_connector_type_api_v1_service_connector_types__connector_type__get: {
    parameters: {
      path: {
        connector_type: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceConnectorTypeModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Stacks
   * @description Returns all stacks.
   *
   * Args:
   *     stack_filter_model: Filter model used for pagination, sorting, filtering
   *     auth_context: Authentication Context
   *
   * Returns:
   *     All stacks.
   */
  list_stacks_api_v1_stacks_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        scope_user?: string;
        is_shared?: boolean | string;
        name?: string;
        description?: string;
        workspace_id?: string;
        user_id?: string;
        component_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_StackResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Stack
   * @description Returns the requested stack.
   *
   * Args:
   *     stack_id: ID of the stack.
   *
   * Returns:
   *     The requested stack.
   */
  get_stack_api_v1_stacks__stack_id__get: {
    parameters: {
      path: {
        stack_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StackResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Stack
   * @description Updates a stack.
   *
   * Args:
   *     stack_id: Name of the stack.
   *     stack_update: Stack to use for the update.
   *
   * Returns:
   *     The updated stack.
   */
  update_stack_api_v1_stacks__stack_id__put: {
    parameters: {
      path: {
        stack_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StackUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StackResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Stack
   * @description Deletes a stack.
   *
   * Args:
   *     stack_id: Name of the stack.
   */
  delete_stack_api_v1_stacks__stack_id__delete: {
    parameters: {
      path: {
        stack_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Stack Components
   * @description Get a list of all stack components for a specific type.
   *
   * Args:
   *     component_filter_model: Filter model used for pagination, sorting,
   *                             filtering
   *     auth_context: Authentication Context
   *
   * Returns:
   *     List of stack components for a specific type.
   */
  list_stack_components_api_v1_components_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        scope_user?: string;
        scope_type?: string;
        is_shared?: boolean | string;
        name?: string;
        flavor?: string;
        type?: string;
        workspace_id?: string;
        user_id?: string;
        connector_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ComponentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Stack Component
   * @description Returns the requested stack component.
   *
   * Args:
   *     component_id: ID of the stack component.
   *
   * Returns:
   *     The requested stack component.
   */
  get_stack_component_api_v1_components__component_id__get: {
    parameters: {
      path: {
        component_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ComponentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Stack Component
   * @description Updates a stack component.
   *
   * Args:
   *     component_id: ID of the stack component.
   *     component_update: Stack component to use to update.
   *
   * Returns:
   *     Updated stack component.
   */
  update_stack_component_api_v1_components__component_id__put: {
    parameters: {
      path: {
        component_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComponentUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ComponentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Deregister Stack Component
   * @description Deletes a stack component.
   *
   * Args:
   *     component_id: ID of the stack component.
   */
  deregister_stack_component_api_v1_components__component_id__delete: {
    parameters: {
      path: {
        component_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Stack Component Types
   * @description Get a list of all stack component types.
   *
   * Returns:
   *     List of stack components.
   */
  get_stack_component_types_api_v1_component_types_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Run Steps
   * @description Get run steps according to query filters.
   *
   * Args:
   *     step_run_filter_model: Filter model used for pagination, sorting,
   *                                filtering
   *
   * Returns:
   *     The run steps according to query filters.
   */
  list_run_steps_api_v1_steps_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        entrypoint_name?: string;
        code_hash?: string;
        cache_key?: string;
        status?: string;
        start_time?: string;
        end_time?: string;
        pipeline_run_id?: string;
        original_step_run_id?: string;
        user_id?: string;
        workspace_id?: string;
        num_outputs?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_StepRunResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Run Step
   * @description Create a run step.
   *
   * Args:
   *     step: The run step to create.
   *
   * Returns:
   *     The created run step.
   */
  create_run_step_api_v1_steps_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StepRunRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StepRunResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Step
   * @description Get one specific step.
   *
   * Args:
   *     step_id: ID of the step to get.
   *
   * Returns:
   *     The step.
   */
  get_step_api_v1_steps__step_id__get: {
    parameters: {
      path: {
        step_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StepRunResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Step
   * @description Updates a step.
   *
   * Args:
   *     step_id: ID of the step.
   *     step_model: Step model to use for the update.
   *
   * Returns:
   *     The updated step model.
   */
  update_step_api_v1_steps__step_id__put: {
    parameters: {
      path: {
        step_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StepRunUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StepRunResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Step Configuration
   * @description Get the configuration of a specific step.
   *
   * Args:
   *     step_id: ID of the step to get.
   *
   * Returns:
   *     The step configuration.
   */
  get_step_configuration_api_v1_steps__step_id__step_configuration_get: {
    parameters: {
      path: {
        step_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Step Status
   * @description Get the status of a specific step.
   *
   * Args:
   *     step_id: ID of the step for which to get the status.
   *
   * Returns:
   *     The status of the step.
   */
  get_step_status_api_v1_steps__step_id__status_get: {
    parameters: {
      path: {
        step_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExecutionStatus"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Step Logs
   * @description Get the logs of a specific step.
   *
   * Args:
   *     step_id: ID of the step for which to get the logs.
   *
   * Returns:
   *     The logs of the step.
   *
   * Raises:
   *     HTTPException: If no logs are available for this step.
   */
  get_step_logs_api_v1_steps__step_id__logs_get: {
    parameters: {
      path: {
        step_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Artifacts
   * @description Get artifacts according to query filters.
   *
   * Args:
   *     artifact_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     The artifacts according to query filters.
   */
  list_artifacts_api_v1_artifacts_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        uri?: string;
        materializer?: string;
        type?: string;
        data_type?: string;
        artifact_store_id?: string;
        workspace_id?: string;
        user_id?: string;
        only_unused?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ArtifactResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Artifact
   * @description Create a new artifact.
   *
   * Args:
   *     artifact: The artifact to create.
   *
   * Returns:
   *     The created artifact.
   */
  create_artifact_api_v1_artifacts_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArtifactRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArtifactResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Artifact
   * @description Get an artifact by ID.
   *
   * Args:
   *     artifact_id: The ID of the artifact to get.
   *
   * Returns:
   *     The artifact with the given ID.
   */
  get_artifact_api_v1_artifacts__artifact_id__get: {
    parameters: {
      path: {
        artifact_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArtifactResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Artifact
   * @description Delete an artifact by ID.
   *
   * Args:
   *     artifact_id: The ID of the artifact to delete.
   */
  delete_artifact_api_v1_artifacts__artifact_id__delete: {
    parameters: {
      path: {
        artifact_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Artifact Visualization
   * @description Get the visualization of an artifact.
   *
   * Args:
   *     artifact_id: ID of the artifact for which to get the visualization.
   *     index: Index of the visualization to get (if there are multiple).
   *
   * Returns:
   *     The visualization of the artifact.
   */
  get_artifact_visualization_api_v1_artifacts__artifact_id__visualize_get: {
    parameters: {
      query?: {
        index?: number;
      };
      path: {
        artifact_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LoadedVisualizationModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Teams
   * @description Returns a list of all teams.
   *
   * Args:
   *     team_filter_model: All filter parameters including pagination params.
   *
   * Returns:
   *     List of all teams.
   */
  list_teams_api_v1_teams_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        name?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_TeamResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Team
   * @description Creates a team.
   *
   * # noqa: DAR401
   *
   * Args:
   *     team: Team to create.
   *
   * Returns:
   *     The created team.
   */
  create_team_api_v1_teams_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Team
   * @description Returns a specific team.
   *
   * Args:
   *     team_name_or_id: Name or ID of the team.
   *
   * Returns:
   *     A specific team.
   */
  get_team_api_v1_teams__team_name_or_id__get: {
    parameters: {
      path: {
        team_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Team
   * @description Deletes a specific team.
   *
   * Args:
   *     team_name_or_id: Name or ID of the team.
   */
  delete_team_api_v1_teams__team_name_or_id__delete: {
    parameters: {
      path: {
        team_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Team
   * @description Updates a team.
   *
   * # noqa: DAR401
   *
   * Args:
   *     team_id: ID of the team to update.
   *     team_update: Team update.
   *
   * Returns:
   *     The updated team.
   */
  update_team_api_v1_teams__team_id__put: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Role Assignments For Team
   * @description Returns a list of all roles that are assigned to a team.
   *
   * Args:
   *     team_role_assignment_filter_model: All filter parameters including
   *         pagination params.
   *
   * Returns:
   *     A list of all roles that are assigned to a team.
   */
  list_role_assignments_for_team_api_v1_teams__team_name_or_id__roles_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        workspace_id?: string;
        team_id?: string;
        role_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_TeamRoleAssignmentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Users
   * @description Returns a list of all users.
   *
   * Args:
   *     user_filter_model: Model that takes care of filtering, sorting and pagination
   *
   * Returns:
   *     A list of all users.
   */
  list_users_api_v1_users_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        name?: string;
        full_name?: string;
        email?: string;
        active?: boolean | string;
        email_opted_in?: boolean | string;
        external_user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_UserResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get User
   * @description Returns a specific user.
   *
   * Args:
   *     user_name_or_id: Name or ID of the user.
   *
   * Returns:
   *     A specific user.
   */
  get_user_api_v1_users__user_name_or_id__get: {
    parameters: {
      path: {
        user_name_or_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Role Assignments For User
   * @description Returns a list of all roles that are assigned to a user.
   *
   * Args:
   *     user_role_assignment_filter_model: filter models for user role assignments
   *
   * Returns:
   *     A list of all roles that are assigned to a user.
   */
  list_role_assignments_for_user_api_v1_users__user_name_or_id__roles_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        workspace_id?: string;
        user_id?: string;
        role_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_UserRoleAssignmentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Current User
   * @description Returns the model of the authenticated user.
   *
   * Args:
   *     auth_context: The authentication context.
   *
   * Returns:
   *     The model of the authenticated user.
   */
  get_current_user_api_v1_current_user_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Myself
   * @description Updates a specific user.
   *
   * Args:
   *     user: the user to use for the update.
   *     auth_context: The authentication context.
   *
   * Returns:
   *     The updated user.
   */
  update_myself_api_v1_current_user_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Builds
   * @description Gets a list of builds.
   *
   * Args:
   *     build_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     List of build objects.
   */
  list_builds_api_v1_pipeline_builds_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        workspace_id?: string;
        user_id?: string;
        pipeline_id?: string;
        stack_id?: string;
        is_local?: boolean;
        contains_code?: boolean;
        zenml_version?: string;
        python_version?: string;
        checksum?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineBuildResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Build
   * @description Gets a specific build using its unique id.
   *
   * Args:
   *     build_id: ID of the build to get.
   *
   * Returns:
   *     A specific build object.
   */
  get_build_api_v1_pipeline_builds__build_id__get: {
    parameters: {
      path: {
        build_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineBuildResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Build
   * @description Deletes a specific build.
   *
   * Args:
   *     build_id: ID of the build to delete.
   */
  delete_build_api_v1_pipeline_builds__build_id__delete: {
    parameters: {
      path: {
        build_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Deployments
   * @description Gets a list of deployment.
   *
   * Args:
   *     deployment_filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     List of deployment objects.
   */
  list_deployments_api_v1_pipeline_deployments_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        workspace_id?: string;
        user_id?: string;
        pipeline_id?: string;
        stack_id?: string;
        build_id?: string;
        schedule_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PipelineDeploymentResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Deployment
   * @description Gets a specific deployment using its unique id.
   *
   * Args:
   *     deployment_id: ID of the deployment to get.
   *
   * Returns:
   *     A specific deployment object.
   */
  get_deployment_api_v1_pipeline_deployments__deployment_id__get: {
    parameters: {
      path: {
        deployment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineDeploymentResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Deployment
   * @description Deletes a specific deployment.
   *
   * Args:
   *     deployment_id: ID of the deployment to delete.
   */
  delete_deployment_api_v1_pipeline_deployments__deployment_id__delete: {
    parameters: {
      path: {
        deployment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * List Code Repositories
   * @description Gets a page of code repositories.
   *
   * Args:
   *     filter_model: Filter model used for pagination, sorting,
   *         filtering
   *
   * Returns:
   *     Page of code repository objects.
   */
  list_code_repositories_api_v1_code_repositories_get: {
    parameters: {
      query?: {
        sort_by?: string;
        logical_operator?: components["schemas"]["LogicalOperators"];
        page?: number;
        size?: number;
        id?: string;
        created?: string;
        updated?: string;
        scope_workspace?: string;
        name?: string;
        workspace_id?: string;
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_CodeRepositoryResponseModel_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Code Repository
   * @description Gets a specific code repository using its unique ID.
   *
   * Args:
   *     code_repository_id: The ID of the code repository to get.
   *
   * Returns:
   *     A specific code repository object.
   */
  get_code_repository_api_v1_code_repositories__code_repository_id__get: {
    parameters: {
      path: {
        code_repository_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CodeRepositoryResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Code Repository
   * @description Updates a code repository.
   *
   * Args:
   *     code_repository_id: The ID of the code repository to update.
   *     update: The model containing the attributes to update.
   *
   * Returns:
   *     The updated code repository object.
   */
  update_code_repository_api_v1_code_repositories__code_repository_id__put: {
    parameters: {
      path: {
        code_repository_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CodeRepositoryUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CodeRepositoryResponseModel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Code Repository
   * @description Deletes a specific code repository.
   *
   * Args:
   *     code_repository_id: The ID of the code repository to delete.
   */
  delete_code_repository_api_v1_code_repositories__code_repository_id__delete: {
    parameters: {
      path: {
        code_repository_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
};
